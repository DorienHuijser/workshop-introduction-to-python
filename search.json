[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to Python & Data",
    "section": "",
    "text": "Welcome!\nPython is a powerful programming language that is popular can be used to write scripts for to work effectively and reproducibly with data. In this workshop, we aim to give you the tools to start exploring Python and all it has to offer by yourself.\nOur workshop material is licensed under a Creative Commons Attribution 4.0 International License. You can view the license here."
  },
  {
    "objectID": "acknowledgements.html#contributors",
    "href": "acknowledgements.html#contributors",
    "title": "1  Acknowledgements",
    "section": "1.1 Contributors",
    "text": "1.1 Contributors\n\nJelle\nChristine\nRoel\nNeha\nStefano"
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "2  Schedule",
    "section": "",
    "text": "we can add a detailed schedule here later"
  },
  {
    "objectID": "installation-and-setup.html",
    "href": "installation-and-setup.html",
    "title": "3  Installation & Setup",
    "section": "",
    "text": "Hello plz don’t download Python from the Microsoft Store :P"
  },
  {
    "objectID": "course-materials.html",
    "href": "course-materials.html",
    "title": "4  Course Materials",
    "section": "",
    "text": "You can download the course materials as individual files or as zip files\n\ninsert links to datasets and notebooks and zip files etc. below"
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "What is Python? Why do we like it so much more than R? Let’s get going!"
  },
  {
    "objectID": "python-101.html",
    "href": "python-101.html",
    "title": "5  Introduction to python",
    "section": "",
    "text": "6 Introduction to python"
  },
  {
    "objectID": "python-101.html#variables-values-and-their-types",
    "href": "python-101.html#variables-values-and-their-types",
    "title": "5  Introduction to python",
    "section": "6.1 Variables, values and their types",
    "text": "6.1 Variables, values and their types\nThe cell below contains Python code that can be executed by the Python interpreter. One of the most basic things that we can do with Python is to use it as a calculator:\n\n2+2\n\n4\n\n\nGreat, but there are many calculators. It gets more interesting when we use variables to store information. This is done with the = operator. In Python, variable names: - can include letters, digits, and underscores - cannot start with a digit - are case sensitive.\n\nx = 3.0\n\nOnce assigned, variables can be used in new operations:\n\ny = 2.0\nx + y\n\n5.0\n\n\nPython knows various types of data. Three common ones are:\n\ninteger numbers\nfloating point numbers\nstrings\n\n\ntext = \"Data Carpentry\"\nnumber = 42\npi_value = 3.14159265358\n\nIn the example above, three variables are assigned. Variable number is an integer number with a value of 42 while pi_value is a floating point number and text is of type string.\nUsing the type command, it is possible to check the data type of a variable.\n\ntext\n\n'Data Carpentry'\n\n\n\ntype(text)\n\nstr\n\n\n\nnumber\n\n42\n\n\n\ntype(number)\n\nint\n\n\n\npi_value\n\n3.14159265358\n\n\n\ntype(pi_value)\n\nfloat"
  },
  {
    "objectID": "python-101.html#output-versus-printing",
    "href": "python-101.html#output-versus-printing",
    "title": "5  Introduction to python",
    "section": "6.2 Output versus printing",
    "text": "6.2 Output versus printing\nIn the above examples, most of the times output is printed directly below the cell, but not always the output is printed and not all operations are printed. The print command can be used to control what is printed when.\nNote, that text (strings) always has to be surrounded by \" or '.\n\nprint(\"Hello World\")\n\nHello World\n\n\nIn the example below we first print the value of the variable number using the print command, and then call the variable:\n\nprint(number)\nnumber\n\n42\n\n\n42\n\n\nNow we do it the other way around:\n\nnumber\nprint(number)\n\n42\n\n\nWhen not using the print command, only the output of the last operation in the input cell is printed. If the last operation is the assignment of a variable, nothing will be printed.\nIn general print is the only way to print output to the screen when you are not working in an interactive environment like Jupyter (as we are doing now).\nRule of thumb: use the normal output for quick checking the output of an operation while developing in your Jupyter notebook, use print for printing output that still needs to be there in the future while your scripts get more complicated."
  },
  {
    "objectID": "python-101.html#mathematical-operations",
    "href": "python-101.html#mathematical-operations",
    "title": "5  Introduction to python",
    "section": "6.3 Mathematical operations",
    "text": "6.3 Mathematical operations\nIn Python you can do a wide variety of mathematical operations. A few examples:\n\nsumming = 2 + 2\nmultiply = 2 * 7\npower = 2 ** 16\nmodulo = 13 % 5\n\nprint(\"Sum: \", summing)\nprint(\"Multiply: \", multiply)\nprint(\"Power: \", power)\nprint(\"Modulo: \", modulo)\n\nSum:  4\nMultiply:  14\nPower:  65536\nModulo:  3\n\n\nOnce we have data stored in variables, we can use the variables to do calculations.\n\nnumber = 42\npi_value = 3.14159265358\n\noutput = number * pi_value\nprint(output)\n\n131.94689145036"
  },
  {
    "objectID": "python-101.html#built-in-python-functions",
    "href": "python-101.html#built-in-python-functions",
    "title": "5  Introduction to python",
    "section": "6.4 Built-in Python functions",
    "text": "6.4 Built-in Python functions\nTo carry out common tasks with data and variables in Python, the language provides us with several built-in functions. Examples of built-in functions that we already used above are print and type.\nCalling a function When we want to make use of a function (referred to as calling the function), we type the name of the function followed by parentheses. Between the parentheses we can pass arguments.\nArguments We typically provide a function with ‘arguments’ to tell python which values or variables are used to perform the body of the function. In the example below type is the function name and pi_value is the argument.\n\ntype(pi_value)\n\nfloat\n\n\nOther useful built-in functions are abs(), max(), min(), range(). Find more built-in functions here.\n\nmax([1,2,3,2,1])\n\n3"
  },
  {
    "objectID": "python-101.html#boolean-values-logical-expressions-and-operators",
    "href": "python-101.html#boolean-values-logical-expressions-and-operators",
    "title": "5  Introduction to python",
    "section": "6.5 Boolean values, Logical expressions and operators",
    "text": "6.5 Boolean values, Logical expressions and operators\nIn programming you often need to know if something is True or False. True and False are called Boolean values and have their own data type (bool so they are not of type str!!). True and False are the only two Boolean values.\n\na = True\na\n\nTrue\n\n\n\nb = False\nb\n\nFalse\n\n\n\ntype(a)\n\nbool\n\n\nComparison operators (e.g. >, <, ==) are used in an expression to compare two values. The result of this expression is either True or False. Why this is useful we will show later (see if-statements).\n\n3 > 4\n\nFalse\n\n\n3 > 4 is an example of a ‘logical expression’ (also known as condition), where > is the comparison operator.\n\n4 > 3\n\nTrue\n\n\n== is another comparison operator to check if two values or variables are the same. If this is the case it will return True\n\nfour = 4          # first we create a variable\nfour == 4         # then we check if it is equal to 4\n\nTrue\n\n\n!= is used to check if two values or variable are not the same. If this is the case it will return True\n\nprint(\"Four is not equal to 5: \", four != 5)\nprint(\"Four is not equal to 4: \", four != 4)\n\nFour is not equal to 5:  True\nFour is not equal to 4:  False\n\n\nand, or and not are ‘logical operators’, and are used to join two logical expressions (or revert a logical expression in the case of not) to create more complex conditions.\nand will return True if both expression on either side are True.\n\na = True\nb = True\na and b\n\nTrue\n\n\n\na = True\nb = False\na and b\n\nFalse\n\n\n\n4 > 3 and 9 > 3\n\nTrue\n\n\nor is used to check if at least one of two logical expressions are True. If this is the case it will return True.\n\n3 > 4 or 9 > 3\n\nTrue\n\n\n\n4 > 3 or 9 > 3\n\nTrue\n\n\nIn the last three examples you can see that multiple expressions can be combined in a single line of Python code. Python evaluates the expressions one by one. 4 > 3 would return True, 9 > 3 would return True, so 4 > 3 or 9 > 3 would translate to True or True.\nIt is also possible to assign the output of an expression to a variable:\n\ngreater = 3 > 4\nprint(\"3 > 4 : \", greater)\n\n3 > 4 :  False\n\n\nThe not operator can be used to reverse the Boolean value. If you apply not to an expression that evaluates to True, then you get False as a result. If you apply not to an expression that evaluates to False, then you get True as a result:\n\nnot 4 > 3\n\nFalse"
  },
  {
    "objectID": "python-101.html#the-if-statement",
    "href": "python-101.html#the-if-statement",
    "title": "5  Introduction to python",
    "section": "6.6 The if-statement",
    "text": "6.6 The if-statement\nIf statements can be used to perform tasks only when a certain condition is met.\n\nnum = 101\n\nif num > 100:\n    print('number is greater than 100')\n\nnumber is greater than 100\n\n\nAs you can see, the line print(... starts with 4 spaces indentation. In Python indentation is very important. Python uses indentation to determine which lines of code belong to what part of the code. This is mostly important when defining e.g. if-statements, for loops or functions. After the if condition, all lines with indentation are only performed when the if-condition is met.\n\nnum = 99\nif num > 100:\n    print('This line is only executed when num > 100')\n    print('This line is only executed when num > 100')\n    \n    print('This line is only executed when num > 100')\n    \nprint('This line is always executed')\n\nThis line is always executed\n\n\nIt is also possible to specify a task that is performed when the condition is not met using else (note the use of indentation):\n\nnum = 37\n\nif num > 100:\n    print('number is greater than 100')\nelse:\n    print('number is not greater than 100')\n\nprint('done')\n\nnumber is not greater than 100\ndone\n\n\nAn if ... else statement can be extended with (one or more) elif to specify more tasks that need to be performed on other conditions. These extended if ... else statements always start with if followed by (one or more) elif. When an else statement is included it is always the last statement.\nOrder matters: The statements (or conditions) are checked in order from top to bottom and only the task belonging to the first condition that is met is being performed.\n\nnum = -3\n\nif num > 0:\n    print(num, 'is positive')\nelif num == 0:\n    print(num, 'is zero')\nelse:\n    print(num, 'is negative')\n\n-3 is negative\n\n\nAlong with the > and == comparison operators that we have already used for comparing values in our logical expressions above, there are a few more options to know about:\n\n>: greater than\n<: less than\n==: equal to\n!=: does not equal\n>=: greater than or equal to\n<=: less than or equal to\n\nWe can combine logical statements using and and or in more complex conditions in if statements.\n\nif (1 < 0) or (1 >= 0):\n    print('at least one the above logical statements is true')\n\nat least one the above logical statements is true\n\n\nWhile and is only true if both parts are true\n\nif (1 < 0) and (1 >= 0):\n    print('both tests are true')\nelse:\n    print('at least one of both tests is not true')\n\nat least one of both tests is not true"
  },
  {
    "objectID": "python-101.html#lists-and-tuples",
    "href": "python-101.html#lists-and-tuples",
    "title": "5  Introduction to python",
    "section": "6.7 Lists and Tuples",
    "text": "6.7 Lists and Tuples\nUntil now we have worked with values and variables that hold one value or string. Now we will go into other data types that can combine multiple values or strings.\nLists are common data structures to hold a sequence of elements. We can create a list by putting values inside square brackets and separating the values with commas.\n\nnumbers = [1, 2, 3]\nprint(numbers)\n\n[1, 2, 3]\n\n\nEach element can be accessed by an index. The index of the first element in a list in Python is 0 (in some other programming languages that would be 1).\n\nprint(\"The first element in the list numbers is: \", numbers[0])\n\nThe first element in the list numbers is:  1\n\n\n\ntype(numbers)\n\nlist\n\n\nA total number of items in a list is called the ‘length’ and can be calculated using the len() function.\n\nlen(numbers)\n\n3\n\n\nYou can do various things with lists. E.g. it is possible to sum the items in a list (when the items are all numbers)\n\nprint(\"The sum of the items in the list is:\", sum(numbers))\nprint(\"The mean of the items in the list is:\", sum(numbers)/len(numbers))\n\nThe sum of the items in the list is: 6\nThe mean of the items in the list is: 2.0\n\n\n\nnumbers[3]\n\nIndexError: list index out of range\n\n\nThis error is expected. The list consists of three items, and the indices of those items are 0, 1 and 2.\n\nnumbers[-1]\n\n3\n\n\nYes, we can use negative numbers as indices in Python. When we do so, the index -1 gives us the last element in the list, -2 the second to last, and so on. Because of this, numbers[2] and numbers[-1] point to the same element.\n\nnumbers[2] == numbers[-1]\n\nTrue\n\n\nIt is also possible to combine strings in a list:\n\nwords = [\"cat\", \"dog\", \"horse\"]\nwords[1]\n\n'dog'\n\n\n\ntype(words)\n\nlist\n\n\n\nif type(words) == type(numbers):\n    print(\"these variables have the same type!\")\n\nthese variables have the same type!\n\n\nIt is also possible to combine values of different type (e.g. strings and integers) in a list\n\nnewlist = [\"cat\", 1, \"horse\"]\n\nThe type of the variable newlist is list. The elements of the list have their own data type:\n\ntype(newlist[0])\n\nstr\n\n\n\ntype(newlist[1])\n\nint\n\n\nIt is possible to add numbers to an existing list using list.append()\n\nnumbers.append(4)\nprint(numbers)\n\n[1, 2, 3, 4]\n\n\nUsing the index of an item, you can replace the item in a list:\n\nnumbers[2] = 333\nprint(numbers)\n\n[1, 2, 333, 4]\n\n\nA tuple is similar to a list in that it’s a sequence of elements. However, tuples can not be changed once created (they are “immutable”). Tuples are created by placing comma-separated values inside parentheses () (instead of square brackets []).\n\n# Tuples use parentheses\na_tuple = (1, 2, 3)\nanother_tuple = ('blue', 'green', 'red')\n\n# Note: lists use square brackets\na_list = [1, 2, 3]\n\n\na_list[1] = 5\nprint(a_list)\n\n[1, 5, 3]\n\n\n\na_tuple[1] = 5\nprint(a_tuple)\n\nTypeError: 'tuple' object does not support item assignment\n\n\nHere we see that once the tuple is created, we cannot replace any of the values inside of the tuple.\n\ntype(a_tuple)\n\ntuple"
  },
  {
    "objectID": "python-101.html#dictionaries",
    "href": "python-101.html#dictionaries",
    "title": "5  Introduction to python",
    "section": "6.8 Dictionaries",
    "text": "6.8 Dictionaries\nA dictionary is another way to store multiple items into one object. In dictionaries, however, this is done with keys and values. This can be useful for several reasons, one example is to store model settings, parameters or variable values for multiple scenarios.\n\nmy_dict = {'one': 'first', 'two': 'second'}\nmy_dict\n\n{'one': 'first', 'two': 'second'}\n\n\nWe can access dictionary items by their key:\n\nmy_dict['one']\n\n'first'\n\n\nAnd we can add new key-value pairs like that:\n\nmy_dict['third'] = 'three'\nmy_dict\n\n{'one': 'first', 'two': 'second', 'third': 'three'}\n\n\nDictionary items are key-value pairs. The keys are changeable and unique. The values are changable, but not necessarily unique.\n\nmy_dict['third'] = 'three'\nmy_dict\n\n{'one': 'first', 'two': 'second', 'third': 'three'}\n\n\n\nprint(\"Dictionary keys: \", my_dict.keys())\nprint(\"Dictionary values: \", my_dict.values())\nprint(\"Dictionary items (key, value): \", my_dict.items())\n\nDictionary keys:  dict_keys(['one', 'two', 'third'])\nDictionary values:  dict_values(['first', 'second', 'three'])\nDictionary items (key, value):  dict_items([('one', 'first'), ('two', 'second'), ('third', 'three')])"
  },
  {
    "objectID": "python-101.html#for-loops",
    "href": "python-101.html#for-loops",
    "title": "5  Introduction to python",
    "section": "6.9 For loops",
    "text": "6.9 For loops\nLet’s have a look at our list again. One way to print each number is to use three print statements:\n\nnumbers = [5, 6, 7]\nprint(numbers[0])\nprint(numbers[1])\nprint(numbers[2])\n\n5\n6\n7\n\n\nA more efficient (less typing) and reliable way to print each element of a list is to loop over the list using a for loop:\n\nfor item in numbers:\n    print(item)\n\n5\n6\n7\n\n\nThe improved version uses a for loop to repeat an operation — in this case, printing — once for each item in a sequence. Note that (similar to if statements) Python needs indentation (4 whitespaces) to determine which lines of code are part of the for loop.\nIf we want to also get the index, we can use the built-in function enumerate:\n\nwords = [\"cat\", \"dog\", \"horse\"]\n\nfor index, item in enumerate(words):\n    print(index)\n    print(item)\n\n0\ncat\n1\ndog\n2\nhorse\n\n\nFor loops can also be used with dictionaries. Let’s take our dictionary from the previous section and inspect the dictionary items\n\nfor item in my_dict.items():\n    print(item, \"is of type\", type(item))\n\n('one', 'first') is of type <class 'tuple'>\n('two', 'second') is of type <class 'tuple'>\n('third', 'three') is of type <class 'tuple'>\n\n\nWe can extract the keys and values from the items directly in the for statement:\n\nfor key, value in my_dict.items():\n    print(key, \"->\", value)\n\none -> first\ntwo -> second\nthird -> three"
  },
  {
    "objectID": "python-101.html#functions",
    "href": "python-101.html#functions",
    "title": "5  Introduction to python",
    "section": "6.10 Functions",
    "text": "6.10 Functions\nWe have already seen some built-in functions: e.g. print, type, len. And we have seen special functions that belong to a variable (python object) like my_dict.items() and my_list.append(). There are more built-in functions e.g. for mathematical operations:\n\nsum(numbers)\n\n18\n\n\nPlease refer to https://docs.python.org/3/library/functions.html for more built-in functions.\n\n6.10.1 Writing own functions\nWe will now turn to writing own functions. When should you write your own function?\n1. If the functionality is not covered by an out-of-the-box function like the built-in functions or another python package\n2. When code is getting pretty long, you can split it up into logical and reusable units\n3. When code is often reused, e.g. you are reading in tens of spreadsheets and you need to clean them all in the same way. Instead of typing the line of code over and over again, it is more elegant and looks cleaner to create a function.\n4. When code may be reused outside your current project. Scripts and the functions in a script can be imported in other scripts to be able to reuse them.\nA big advantage of not having duplicate code inside your script or in multiple scripts is that when you want to make a slight modification to a function, you only have to do this modification in one place, instead of multiple lines that are doing more or less similar things.\nPython provides for this by letting us define things called ‘functions’. Let’s start by defining a function fahr_to_celsius that converts temperatures from Fahrenheit to Celsius:\n\ndef fahr_to_celsius(temp_fahrenheit):\n    temp_celsius = (temp_fahrenheit - 32) * (5/9)\n    return temp_celsius\n\nThe function definition opens with the keyword def followed by the name of the function fahr_to_celsius and a parenthesized list of variables (in this case only one temp_fahrenheit). The body of the function — the statements that are executed when it runs — is indented below the definition line. The body concludes with a return keyword followed by the return value.\nWhen we call the function, the values we pass to it as arguments are assigned to the variables in the function definition so that we can use them inside the function. Inside the function, we use a return statement to send a result back to whoever asked for it.\nLet’s try running our function.\n\nfahr_to_celsius(98)\n\n36.66666666666667\n\n\n\nprint('freezing point of water:', fahr_to_celsius(32), 'C')\nprint('boiling point of water:', fahr_to_celsius(212), 'C')\n\nfreezing point of water: 0.0 C\nboiling point of water: 100.0 C\n\n\nHere we directly passed a value to the function. We can also call the function with a variable:\n\na = 0\nprint(fahr_to_celsius(a))\n\n-17.77777777777778\n\n\nWhat happens if you pass a variable name that is not defined yet?\n\nprint(fahr_to_celsius(b))\n\n-17.77777777777778"
  },
  {
    "objectID": "data-science-with-pandas.html",
    "href": "data-science-with-pandas.html",
    "title": "Data Science with Pandas",
    "section": "",
    "text": "Let’s try out the Pandas library!\n\n2 + 2\n\n4\n\n\n\nprint(\"Hello World\")\n\nHello World\n\n\nThis is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  }
]