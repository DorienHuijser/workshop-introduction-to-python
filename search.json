[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to Python & Data",
    "section": "",
    "text": "Python is a powerful programming language that is popular can be used to write scripts for to work effectively and reproducibly with data. In this workshop, we aim to give you the tools to start exploring Python and all it has to offer by yourself.\nOur workshop material is licensed under a Creative Commons Attribution 4.0 International License. You can view the license here."
  },
  {
    "objectID": "acknowledgements.html",
    "href": "acknowledgements.html",
    "title": "1  Acknowledgements",
    "section": "",
    "text": "Our course materials are an adaptation of the …. Carpentries course, reused under a CC-something license. The Intro to R & Data course at UU also served as a reference."
  },
  {
    "objectID": "acknowledgements.html#contributors",
    "href": "acknowledgements.html#contributors",
    "title": "1  Acknowledgements",
    "section": "1.1 Contributors",
    "text": "1.1 Contributors\n\nJelle\nChristine\nRoel\nNeha\nStefano"
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "2  Schedule",
    "section": "",
    "text": "we can add a detailed schedule here later"
  },
  {
    "objectID": "installation-and-setup.html",
    "href": "installation-and-setup.html",
    "title": "3  Installation & Setup",
    "section": "",
    "text": "Hello plz don’t download Python from the Microsoft Store :P"
  },
  {
    "objectID": "course-materials.html",
    "href": "course-materials.html",
    "title": "4  Course Materials",
    "section": "",
    "text": "insert links to datasets and notebooks and zip files etc. below"
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "5  Introduction",
    "section": "",
    "text": "What is Python? Why do we like it so much more than R? Let’s get going!"
  },
  {
    "objectID": "python-101.html",
    "href": "python-101.html",
    "title": "6  Introduction to python",
    "section": "",
    "text": "2+2\n\n4\n\n\n\nprint(\"Hello World\")\n\nHello World\n\n\n\n\n\n\ntext = \"Data Carpentry\"\nnumber = 42\npi_value = 3.141592653589793238462643383279502884197\n\n\ntext\n\n'Data Carpentry'\n\n\n\ntype(text)\n\nstr\n\n\n\nnumber\n\n42\n\n\n\ntype(number)\n\nint\n\n\n\npi_value\n\n3.141592653589793\n\n\n\ntype(pi_value)\n\nfloat\n\n\n\n\n\nIn this example we first print the number and then call the variable again:\n\nprint(number)\nnumber\n\n42\n\n\n42\n\n\nNow we do it the other way around:\n\nnumber\nprint(number)\n\n42\n\n\nThe interpreter does not output the value of the variable unless it is the very last line in an input field. In general print is the only way to print output to the screen when you are not working in an interactive environment as Jupyter, but when you are working with scripts. Rule of thumb: use output for quick checking while developing your Jupyter notebook, use print for all output that needs to be there while running a Jupyter notebook.\n\nsumming = 2 + 2\nmultiply = 6 * 7\npower = 2 ** 16\nmodulo = 13 % 5\n\nprint(\"Sum: \", summing)\nprint(\"Multiply: \", multiply)\nprint(\"Power: \", power)\nprint(\"Modulo: \", modulo)\n\nSum:  4\nMultiply:  42\nPower:  65536\nModulo:  3\n\n\n\n\n\nThere are two logical values, true and false. Inpython they are decoded as the values True and False. Note: here these two are really distinct values and no strings!\n\nTrue\n\nTrue\n\n\n\nFalse\n\nFalse\n\n\nWith the logical operators >, <, ==, and, or and not we can now compare variables and create logical statements.\n\ncompare = 3 > 4\nprint(\"3 > 4 : \", compare)\n\n3 > 4 :  False\n\n\n\nnot_compare = not compare\nprint(\"not(3 > 4): \", not_compare)\n\nnot(3 > 4):  True\n\n\n\ncompare or not_compare\n\nTrue\n\n\n\ncompare and not_compare\n\nFalse\n\n\n\nTrue or False\n\nTrue\n\n\n\nTrue and False\n\nFalse\n\n\n\nTrue == compare\n\nFalse\n\n\n\n\n\nWe saw how to create logical statements. In the if-clause we use these as conditional statements to carry some tasks.\n\n\n\n\nnumbers = [1, 2, 3]\nnumbers[0]\n\n1\n\n\n\ntype(numbers)\n\nlist\n\n\n\nlen(numbers)\n\n3\n\n\n\nnumbers[3]\n\nIndexError: list index out of range\n\n\n\nnumbers[-1]\n\n3\n\n\n\nnumbers[2] == numbers[-1]\n\nTrue\n\n\n\nwords = [\"cat\", \"dog\", \"horse\"]\nwords[1]\n\n'dog'\n\n\n\ntype(words)\n\nlist\n\n\n\nif type(words) == type(numbers):\n    print(\"these variables have the same type!\")\n\nthese variables have the same type!\n\n\n\nnewlist = [\"cat\", 1, \"horse\"]\n\n\ntype(newlist[0])\n\nstr\n\n\n\ntype(newlist[1])\n\nint\n\n\n\nnumbers.append(4)\nprint(numbers)\n\n[1, 2, 3, 4]\n\n\n\nnumbers[2] = 333\nprint(numbers)\n\n[1, 2, 333, 4]\n\n\n\n# Tuples use parentheses\na_tuple = (1, 2, 3)\nanother_tuple = ('blue', 'green', 'red')\n\n# Note: lists use square brackets\na_list = [1, 2, 3]\n\n\na_list[1] = 5\nprint(a_list)\n\n[1, 5, 3]\n\n\n\na_tuple[2] = 5\nprint(a_tuple)\n\nTypeError: 'tuple' object does not support item assignment\n\n\n\ntype(a_tuple)\n\ntuple\n\n\n\n\n\n\nmy_dict = {'one': 'first', 'two': 'second'}\nmy_dict\n\n{'one': 'first', 'two': 'second'}\n\n\n\nmy_dict['one']\n\n'first'\n\n\n\nmy_dict['third'] = 'three'\nmy_dict\n\n{'one': 'first', 'two': 'second', 'third': 'three'}\n\n\n\n\n\n\nnumbers = [5, 6, 7]\n\n\nfor item in numbers:\n    print(item)\n\n5\n6\n7\n\n\n\nwords = [\"cat\", \"dog\", \"horse\"]\nfor index, item in enumerate(words):\n    print(index)\n    print(item)\n\n0\ncat\n1\ndog\n2\nhorse\n\n\n\nfor key, value in my_dict.items():\n    print(key, '->', value)\n\none -> first\ntwo -> second\nthird -> three\n\n\n\n\n\n\n\nTry to run this code. Why is there no output?\n\nx = 6\napple = \"apple\"\n\n\n\n\n\nCalculate: One plus five divided by nine.\nAssign the result of the calculation to a variable.\nTest if the result is larger than one.\nRound off the result to one decimal. Use the function round.\n\n\ns = (1+5)/9\nround(s, 1)\n\n0.7\n\n\n\n\n\nPredict the results:\n\n5 == 5\nnot 3 > 2\nTrue == 'True'\nFalse < True\n\nTrue\n\n\n\n\n\nMeet Ann, Bob, Chloe, and Dan. 1. Create a list with their names. Save the list as “name”.\n\nHow old are Ann, Bob, Chloe, and Dan? You decide! Design a numeric list with their respective ages. Save it as “age”.\nWhat is their average age? (Use the function sum to sum up their cumulative ages, you can use len(age) to get the number of elements in a list)\n\n\nname = [\"Ann\", \"Bob\", \"Chloe\", \"Dan\"]\nage = [3, 30, 41, 2]\nsum(age)/len(age)\n\n19.0\n\n\n\n\n\n\nReturn only the first number in the list age.\nReturn the 2nd and 4th name in your list name.\nReturn only ages under 30 from your list age.\nReturn the name “Chloe” from the list name.\n\n\nage[0]\n[age[1], age[3]]\nnew_age=[]\nfor a in age:if a < 30:new_age.append(a)[n for n in name if n == \"Chloe\"] #or\nname[name.index(\"Chloe\")]\n\nSyntaxError: invalid syntax (4124803616.py, line 4)\n\n\n\n\n\nMake an if statement that tests if a number is even, and saves the classification in a variable called number_class.\n\nnumber = 5\nif number%2 == 0:\n    number_class = \"even\"\nelse:\n    number_class = \"odd\"\nprint(number, \"is\", number_class)\n\n5 is odd\n\n\n\n\n\nTurn the if statement from the last exercise into a function. Let the user provide the value for number, and return the number_class.\n\ndef even_or_odd(number):\n    if number%2 == 0:\n        number_class = \"even\"\n    else:\n        number_class = \"odd\"\n    return number_class\n\n\nnumber = 5\nprint(number, \"is\", even_or_odd(number))\n\n5 is odd\n\n\n\n\n\nUse the function above to determine whether the numbers between 1 and 10 are even or odd.\n\nfor i in range(1, 11):\n    res = even_or_odd(i)\n    print(i, 'is', res)\n\n1 is odd\n2 is even\n3 is odd\n4 is even\n5 is odd\n6 is even\n7 is odd\n8 is even\n9 is odd\n10 is even"
  },
  {
    "objectID": "data-science-with-pandas.html",
    "href": "data-science-with-pandas.html",
    "title": "7  Data Science with Pandas",
    "section": "",
    "text": "2 + 2\n\n4\n\n\n\nprint(\"Hello World\")\n\nHello World\n\n\nThis is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  }
]