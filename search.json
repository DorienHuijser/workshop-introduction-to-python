[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to Python & Data",
    "section": "",
    "text": "Welcome!\nPython is a powerful programming language that is suitable for scientific computing and general-purpose programming. Python is used to write scripts to work efficiently and reproducibly with scientific data.\nIn this workshop, we will utilize the Jupyter Notebook interface and take you from the basics of Python syntax to using the pandas package to work with data frames. In doing so, we aim to give you the tools and confidence to start exploring Python and all it has to offer.\nOur workshop material is licensed under a Creative Commons Attribution 4.0 International License. You can view the license on our GitHub repository."
  },
  {
    "objectID": "acknowledgements.html#contributors",
    "href": "acknowledgements.html#contributors",
    "title": "Acknowledgements",
    "section": "Contributors",
    "text": "Contributors\nThe following indivduals have contributed to the development of this workshop:\n\nJelle Treep\nChristine Staiger\nRoel Brouwer\nNeha Moopen\nStefano Rapisarda"
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "Time\nActivity\n\n\n\n\n9:00\nWalk-in, tech support\n\n\n9:30\nIntroductions\n\n\n10:00\nPython Basics: Exercises 1-6\n\n\n11:25\nRecap & Questions\n\n\n11:30\nCoffee break\n\n\n11:45\nProgramming: Exercises 7-9\n\n\n12:40\nRecap & Questions\n\n\n12:45\nLunch break\n\n\n13:30\nIntroduction to pandas & Importing data: Exercises 1-4\n\n\n14:15\nSubsetting and mutating data: Exercises 5-8\n\n\n14:55\nRecap & Questions\n\n\n15:00\nCoffee break\n\n\n15:15\nTransformations & tidy data: Exercises 9-12\n\n\n16:00\nData visualization: Exercises 13-15\n\n\n16:55\nFinal recap and closing"
  },
  {
    "objectID": "installation-and-setup.html#overview",
    "href": "installation-and-setup.html#overview",
    "title": "1  Installation & Setup",
    "section": "1.1 Overview",
    "text": "1.1 Overview\nThe course materials are designed to be run on a personal computer. All of the software and data used are freely available online, and instructions on how to obtain them are provided below.\nIf you have any questions, or are not comfortable with doing the installation yourself join the RDM walk-in hours to ask for help."
  },
  {
    "objectID": "installation-and-setup.html#install-python",
    "href": "installation-and-setup.html#install-python",
    "title": "1  Installation & Setup",
    "section": "1.2 Install Python",
    "text": "1.2 Install Python\nIn this course, we will be using Python 3 with some of its most popular scientific libraries. Python is a popular language for research computing, and great for general-purpose programming as well. Although one can install a plain-vanilla Python and all required libraries by hand, we recommend installing Anaconda, a Python distribution that comes with everything we need for the lesson. Detailed installation instructions can be found in the Anaconda documentation, or by following the instructions below.\nRegardless of how you choose to install it, please make sure you install Python version 3.x (e.g., 3.9 is fine).\nWe will teach Python using the Jupyter Notebook, a programming environment that runs in a web browser (Jupyter Notebook will be installed by Anaconda). For this to work you will need a reasonably up-to-date browser. The current versions of the Chrome, Safari and Firefox browsers are all supported (some older browsers, including Internet Explorer version 9 and below, are not).\n\nWindowsMacOSLinux\n\n\n\nOpen https://www.anaconda.com/products/individual#download-section with your web browser.\nDownload the Anaconda for Windows installer with Python 3. (If you are not sure which version to choose, you probably want the 64-bit Graphical Installer Anaconda3-...-Windows-x86_64.exe)\nInstall Python 3 by running the Anaconda Installer, using all of the defaults for installation except make sure to check Add Anaconda to my PATH environment variable.\n\n\n\n\nOpen https://www.anaconda.com/products/individual#download-section with your web browser.\nDownload the Anaconda Installer with Python 3 for macOS (you can either use the Graphical or the Command Line Installer).\nInstall Python 3 by running the Anaconda Installer using all of the defaults for installation.\n\n\n\n\nOpen https://www.anaconda.com/products/individual#download-section with your web browser.\nDownload the Anaconda Installer with Python 3 for Linux.  (The installation requires using the shell. If you aren’t comfortable doing the installation yourself stop here and come to the walk-in hours to ask for help.)\nOpen a terminal window and navigate to the directory where the executable is downloaded (e.g., cd ~/Downloads).\nType\nbash Anaconda3-\nand then press Tab to autocomplete the full file name. The name of file you just downloaded should appear.\nPress Enter (or Return depending on your keyboard). You will follow the text-only prompts. To move through the text, press Spacebar. Type yes and press enter to approve the license. Press Enter (or Return) to approve the default location for the files. Type yes and press Enter (or Return) to prepend Anaconda to your PATH (this makes the Anaconda distribution the default Python).\nClose the terminal window."
  },
  {
    "objectID": "installation-and-setup.html#obtain-lesson-materials",
    "href": "installation-and-setup.html#obtain-lesson-materials",
    "title": "1  Installation & Setup",
    "section": "1.3 Obtain lesson materials",
    "text": "1.3 Obtain lesson materials\n\nDownload ??-data.zip and ??-code.zip (see Course Materials).\nCreate a folder called intro-python on your Desktop.\nMove downloaded files to intro-python.\nUnzip the files.\n\nYou should see two folders called data and code in the intro-python directory on your Desktop."
  },
  {
    "objectID": "installation-and-setup.html#launch-python-interface",
    "href": "installation-and-setup.html#launch-python-interface",
    "title": "1  Installation & Setup",
    "section": "1.4 Launch Python interface",
    "text": "1.4 Launch Python interface\nTo start working with Python, we need to launch a program that will interpret and execute our Python commands. Below we list several options. If you don’t have a preference, proceed with the top option in the list that is available on your machine. Otherwise, you may use any interface you like."
  },
  {
    "objectID": "installation-and-setup.html#option-a-jupyter-notebook",
    "href": "installation-and-setup.html#option-a-jupyter-notebook",
    "title": "1  Installation & Setup",
    "section": "1.5 Option A: Jupyter Notebook",
    "text": "1.5 Option A: Jupyter Notebook\nA Jupyter Notebook provides a browser-based interface for working with Python. If you installed Anaconda, you can launch a notebook in two ways:\n\nCommand line (Terminal)Anaconda Navigator\n\n\n\nNavigate to the data directory: Unix shell If you’re using a Unix shell application, such as Terminal app in macOS, Console or Terminal in Linux, or Git Bash on Windows, execute the following command:\ncd ~/Desktop/intro-python/data\nCommand Prompt (Windows) On Windows, you can use its native Command Prompt program. The easiest way to start it up is pressing Windows Logo Key+R, entering cmd, and hitting Return. In the Command Prompt, use the following command to navigate to the data folder:\ncd /D %userprofile%\\Desktop\\intro-python\\data\nStart Jupyter server: Unix shell\njupyter notebook\nCommand Prompt (Windows)\npython -m notebook\nLaunch the notebook by clicking on the “New” button on the right and selecting “Python 3” from the drop-down menu.\n\n\n\n\nLaunch Anaconda Navigator. It might ask you if you’d like to send anonymized usage information to Anaconda developers. Make your choice and click “Ok, and don’t show again” button.\nFind the “Notebook” tab and click on the “Launch” button. Anaconda will open a new browser window or tab with a Notebook Dashboard showing you the contents of your Home (or User) folder.\nNavigate to the data directory by clicking on the directory names leading to it. Desktop, intro-python, then data:\nLaunch the notebook by clicking on the “New” button and then selecting “Python 3”."
  },
  {
    "objectID": "installation-and-setup.html#option-b-ipython-interpreter",
    "href": "installation-and-setup.html#option-b-ipython-interpreter",
    "title": "1  Installation & Setup",
    "section": "1.6 Option B: IPython interpreter",
    "text": "1.6 Option B: IPython interpreter\nIPython is an alternative solution situated somewhere in between the plain-vanilla Python interpreter and Jupyter Notebook. It provides an interactive command-line based interpreter with various convenience features and commands. You should have IPython on your system if you installed Anaconda.\nTo start using IPython, execute:\nipython"
  },
  {
    "objectID": "installation-and-setup.html#option-c-plain-vanilla-python-interpreter",
    "href": "installation-and-setup.html#option-c-plain-vanilla-python-interpreter",
    "title": "1  Installation & Setup",
    "section": "1.7 Option C: plain-vanilla Python interpreter",
    "text": "1.7 Option C: plain-vanilla Python interpreter\nTo launch a plain-vanilla Python interpreter, execute:\npython\nIf you are using Git Bash on Windows, you have to call Python via winpty:\nwinpty python\nThe instructions on this page were adapted from the setup instructions of the Software Carpentries “Programming with Python” course and their Workshop Template Python installation instructions, both released under the Creative Commons Attribution license. Changes to the material were made, and can be tracked in the Git repository associated with this course."
  },
  {
    "objectID": "course-materials.html#zipped-file",
    "href": "course-materials.html#zipped-file",
    "title": "Workshop Materials",
    "section": "Zipped File",
    "text": "Zipped File\nThe following zipped file contains the notebooks and data required for the workshop.\n\nlink to zipped file\n\nDon’t forget to extract the contents of the zipped file after downloading!"
  },
  {
    "objectID": "course-materials.html#notebooks",
    "href": "course-materials.html#notebooks",
    "title": "Workshop Materials",
    "section": "Notebooks",
    "text": "Notebooks\nWe will be using the following Jupyter Notebooks to work on the exercises:\n\npython-101-exercises.ipynb\ndata-science-with-pandas-exercises.ipynb"
  },
  {
    "objectID": "course-materials.html#data",
    "href": "course-materials.html#data",
    "title": "Workshop Materials",
    "section": "Data",
    "text": "Data\nThe data for this workshop is from the Portal Teaching Database. We will be using the following datasets:\n\nsurveys.csv\nspecies.csv\nplots.csv"
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "What is Python? Why do we like it so much more than R? Let’s get going!"
  },
  {
    "objectID": "Introduction_to_python_1.html#variables-values-and-their-types",
    "href": "Introduction_to_python_1.html#variables-values-and-their-types",
    "title": "2  Variables and printing output",
    "section": "2.1 Variables, values and their types",
    "text": "2.1 Variables, values and their types\nThe cell below contains Python code that can be executed by the Python interpreter. One of the most basic things that we can do with Python is to use it as a calculator:\n\n2+2\n\n4\n\n\nGreat, but there are many calculators. It gets more interesting when we use variables to store information. This is done with the = operator. In Python, variable names: - can include letters, digits, and underscores - cannot start with a digit - are case sensitive.\n\nx = 3.0\n\nOnce assigned, variables can be used in new operations:\n\ny = 2.0\nx + y\n\n5.0\n\n\nPython knows various types of data. Three common ones are:\n\ninteger numbers\nfloating point numbers\nstrings\n\n\ntext = \"Data Carpentry\"\nnumber = 42\npi_value = 3.14159265358\n\nIn the example above, three variables are assigned. Variable number is an integer number with a value of 42 while pi_value is a floating point number and text is of type string.\nUsing the type command, it is possible to check the data type of a variable.\n\ntext\n\n'Data Carpentry'\n\n\n\ntype(text)\n\nstr\n\n\n\nnumber\n\n42\n\n\n\ntype(number)\n\nint\n\n\n\npi_value\n\n3.14159265358\n\n\n\ntype(pi_value)\n\nfloat"
  },
  {
    "objectID": "Introduction_to_python_1.html#output-versus-printing",
    "href": "Introduction_to_python_1.html#output-versus-printing",
    "title": "2  Variables and printing output",
    "section": "2.2 Output versus printing",
    "text": "2.2 Output versus printing\nIn the above examples, most of the times output is printed directly below the cell, but not always the output is printed and not all operations are printed. The print command can be used to control what is printed when.\nNote, that text (strings) always has to be surrounded by \" or '.\n\nprint(\"Hello World\")\n\nHello World\n\n\nIn the example below we first print the value of the variable number using the print command, and then call the variable:\n\nprint(number)\nnumber\n\n42\n\n\n42\n\n\nNow we do it the other way around:\n\nnumber\nprint(number)\n\n42\n\n\nWhen not using the print command, only the output of the last operation in the input cell is printed. If the last operation is the assignment of a variable, nothing will be printed.\nIn general print is the only way to print output to the screen when you are not working in an interactive environment like Jupyter (as we are doing now).\nRule of thumb: use the normal output for quick checking the output of an operation while developing in your Jupyter notebook, use print for printing output that still needs to be there in the future while your scripts get more complicated."
  },
  {
    "objectID": "Introduction_to_python_1.html#exercises",
    "href": "Introduction_to_python_1.html#exercises",
    "title": "2  Variables and printing output",
    "section": "2.3 Exercises",
    "text": "2.3 Exercises\nNow go to the Jupyter Dashboard in your internet browser and navigate to the course materials and open the notebook morning_exercises.ipynb\nIf Jupyter Dashboard is not there, check Installation & Setup for instructions to start the Jupyter Dashboard.\nDo Exercise 0 and after that come back to this document to continue with the following chapter Operators and Built-in Functions"
  },
  {
    "objectID": "Introduction_to_python_2.html#mathematical-operations",
    "href": "Introduction_to_python_2.html#mathematical-operations",
    "title": "3  Operators and built-in functions",
    "section": "3.1 Mathematical operations",
    "text": "3.1 Mathematical operations\nIn Python you can do a wide variety of mathematical operations. A few examples:\n\nsumming = 2 + 2\nmultiply = 2 * 7\npower = 2 ** 16\nmodulo = 13 % 5\n\nprint(\"Sum: \", summing)\nprint(\"Multiply: \", multiply)\nprint(\"Power: \", power)\nprint(\"Modulo: \", modulo)\n\nSum:  4\nMultiply:  14\nPower:  65536\nModulo:  3\n\n\nOnce we have data stored in variables, we can use the variables to do calculations.\n\nnumber = 42\npi_value = 3.14159265358\n\noutput = number * pi_value\nprint(output)\n\n131.94689145036"
  },
  {
    "objectID": "Introduction_to_python_2.html#built-in-python-functions",
    "href": "Introduction_to_python_2.html#built-in-python-functions",
    "title": "3  Operators and built-in functions",
    "section": "3.2 Built-in Python functions",
    "text": "3.2 Built-in Python functions\nTo carry out common tasks with data and variables in Python, the language provides us with several built-in functions. Examples of built-in functions that we already used above are print and type.\nCalling a function When we want to make use of a function (referred to as calling the function), we type the name of the function followed by parentheses. Between the parentheses we can pass arguments.\nArguments We typically provide a function with ‘arguments’ to tell python which values or variables are used to perform the body of the function. In the example below type is the function name and pi_value is the argument.\n\ntype(pi_value)\n\nfloat\n\n\nOther useful built-in functions are abs(), max(), min(), range(). Find more built-in functions here.\n\nmax([1,2,3,2,1])\n\n3"
  },
  {
    "objectID": "Introduction_to_python_2.html#boolean-values-logical-expressions-and-operators",
    "href": "Introduction_to_python_2.html#boolean-values-logical-expressions-and-operators",
    "title": "3  Operators and built-in functions",
    "section": "3.3 Boolean values, Logical expressions and operators",
    "text": "3.3 Boolean values, Logical expressions and operators\nIn programming you often need to know if something is True or False. True and False are called Boolean values and have their own data type (bool so they are not of type str!!). True and False are the only two Boolean values.\n\na = True\na\n\nTrue\n\n\n\nb = False\nb\n\nFalse\n\n\n\ntype(a)\n\nbool\n\n\nComparison operators (e.g. &gt;, &lt;, ==) are used in an expression to compare two values. The result of this expression is either True or False. Why this is useful we will show later (see if-statements).\n\n3 &gt; 4\n\nFalse\n\n\n3 &gt; 4 is an example of a ‘logical expression’ (also known as condition), where &gt; is the comparison operator.\n\n4 &gt; 3\n\nTrue\n\n\n== is another comparison operator to check if two values or variables are the same. If this is the case it will return True\n\nfour = 4          # first we assign the integer 4 to a variable\nfour == 4         # then we check if it is equal to 4\n\nTrue\n\n\n!= is used to check if two values or variable are not the same. If this is the case it will return True\n\nprint(\"Four is not equal to 5: \", four != 5)\nprint(\"Four is not equal to 4: \", four != 4)\n\nFour is not equal to 5:  True\nFour is not equal to 4:  False\n\n\nand, or and not are ‘logical operators’, and are used to join two logical expressions (or revert a logical expression in the case of not) to create more complex conditions.\nand will return True if both expression on either side are True.\n\na = True\nb = True\na and b\n\nTrue\n\n\n\na = True\nb = False\na and b\n\nFalse\n\n\n\n4 &gt; 3 and 9 &gt; 3\n\nTrue\n\n\nor is used to check if at least one of two logical expressions are True. If this is the case it will return True.\n\n3 &gt; 4 or 9 &gt; 3\n\nTrue\n\n\n\n4 &gt; 3 or 9 &gt; 3\n\nTrue\n\n\nIn the last three examples you can see that multiple expressions can be combined in a single line of Python code. Python evaluates the expressions one by one. 4 &gt; 3 would return True, 9 &gt; 3 would return True, so 4 &gt; 3 or 9 &gt; 3 would translate to True or True.\nIt is also possible to assign the output of an expression to a variable:\n\ngreater = 3 &gt; 4\nprint(\"3 &gt; 4 : \", greater)\n\n3 &gt; 4 :  False\n\n\nThe not operator can be used to reverse the Boolean value. If you apply not to an expression that evaluates to True, then you get False as a result. If you apply not to an expression that evaluates to False, then you get True as a result:\n\nnot 4 &gt; 3\n\nFalse\n\n\nLogical operators bind variables with different strengths. The and is stronger than the or and gets evaluated first in a boolean expression. So a or b and c will be evaluated like a or (b and c), while in (a or b) and c first the value of the or is evaluated and then combined with and c. This leads to a different result.\n\na = True\nb = True\nc = False\nprint(\"This expression 'a or b and c' evalutes to \", a or b and c)\nprint(\"And this is the same as 'a or (b and c)')\", a or (b and c))\nprint(\"But this expression evaluates '(a or b) and c' first the 'or' and generates:\", (a or b) and c)\n\nThis expression 'a or b and c' evalutes to  True\nAnd this is the same as 'a or (b and c)') True\nBut this expression evaluates '(a or b) and c' first the 'or' and generates: False"
  },
  {
    "objectID": "Introduction_to_python_2.html#exercises",
    "href": "Introduction_to_python_2.html#exercises",
    "title": "3  Operators and built-in functions",
    "section": "3.4 Exercises",
    "text": "3.4 Exercises\nNow go back to your browser to morning_exercises.ipynb and continue with exercises 1-3.\nWhen you finished the exercises, continue to chapter Data types, if-statements and for loops"
  },
  {
    "objectID": "Introduction_to_python_3.html#the-if-statement",
    "href": "Introduction_to_python_3.html#the-if-statement",
    "title": "4  Data types, if-statements and for-loops",
    "section": "4.1 The if-statement",
    "text": "4.1 The if-statement\nIf statements can be used to perform tasks only when a certain condition is met.\n\nnum = 101\n\nif num &gt; 100:\n    print('number is greater than 100')\n\nnumber is greater than 100\n\n\nAs you can see, the line print(...) starts with 4 spaces indentation. In Python indentation is very important. Python uses indentation to determine which lines of code belong to what part of the code. This is mostly important when defining e.g. if-statements, for loops or functions. After the if condition, all lines with indentation are only performed when the if-condition is met.\n\nnum = 99\nif num &gt; 100:\n    print('This line is only executed when num &gt; 100')\n    print('This line is only executed when num &gt; 100')\n    \n    print('This line is only executed when num &gt; 100')\n    \nprint('This line is always executed')\n\nThis line is always executed\n\n\nIt is also possible to specify a task that is performed when the condition is not met using else (note the use of indentation):\n\nnum = 37\n\nif num &gt; 100:\n    print('number is greater than 100')\nelse:\n    print('number is not greater than 100')\n\nprint('done')\n\nnumber is not greater than 100\ndone\n\n\nAn if ... else statement can be extended with (one or more) elif to specify more tasks that need to be performed on other conditions. These extended if ... else statements always start with if followed by (one or more) elif. When an else statement is included it is always the last statement.\nOrder matters: The statements (or conditions) are checked in order from top to bottom and only the task belonging to the first condition that is met is being performed.\n\nnum = -3\n\nif num &gt; 0:\n    print(num, 'is positive')\nelif num == 0:\n    print(num, 'is zero')\nelse:\n    print(num, 'is negative')\n\n-3 is negative\n\n\nAlong with the &gt; and == comparison operators that we have already used for comparing values in our logical expressions above, there are a few more options to know about:\n\n&gt;: greater than\n&lt;: less than\n==: equal to\n!=: does not equal\n&gt;=: greater than or equal to\n&lt;=: less than or equal to\n\nWe can combine logical statements using and and or in more complex conditions in if statements.\n\nif (1 &lt; 0) or (1 &gt;= 0):\n    print('at least one the above logical statements is true')\n\nat least one the above logical statements is true\n\n\nWhile and is only true if both parts are true\n\nif (1 &lt; 0) and (1 &gt;= 0):\n    print('both tests are true')\nelse:\n    print('at least one of the tests is not true')\n\nat least one of the tests is not true"
  },
  {
    "objectID": "Introduction_to_python_3.html#lists-and-tuples",
    "href": "Introduction_to_python_3.html#lists-and-tuples",
    "title": "4  Data types, if-statements and for-loops",
    "section": "4.2 Lists and Tuples",
    "text": "4.2 Lists and Tuples\nUntil now we have worked with values and variables that hold one value or string. Now we will go into other data types that can combine multiple values or strings.\nLists are common data structures to hold a sequence of elements. We can create a list by putting values inside square brackets and separating the values with commas.\n\nnumbers = [1, 2, 3]\nprint(numbers)\n\n[1, 2, 3]\n\n\nEach element can be accessed by an index. The index of the first element in a list in Python is 0 (in some other programming languages that would be 1).\n\nprint(\"The first element in the list numbers is: \", numbers[0])\n\nThe first element in the list numbers is:  1\n\n\n\ntype(numbers)\n\nlist\n\n\nA total number of items in a list is called the ‘length’ and can be calculated using the len() function.\n\nlen(numbers)\n\n3\n\n\nYou can do various things with lists. E.g. it is possible to sum the items in a list (when the items are all numbers)\n\nprint(\"The sum of the items in the list is:\", sum(numbers))\nprint(\"The mean of the items in the list is:\", sum(numbers)/len(numbers))\n\nThe sum of the items in the list is: 6\nThe mean of the items in the list is: 2.0\n\n\nWhat happens here:\n\nnumbers[3]\n\nIndexError: list index out of range\n\n\nThis error is expected. The list consists of three items, and the indices of those items are 0, 1 and 2.\n\nnumbers[-1]\n\n3\n\n\nYes, we can use negative numbers as indices in Python. When we do so, the index -1 gives us the last element in the list, -2 the second to last, and so on. Because of this, numbers[2] and numbers[-1] point to the same element.\n\nnumbers[2] == numbers[-1]\n\nTrue\n\n\nIt is also possible to combine strings in a list:\n\nwords = [\"cat\", \"dog\", \"horse\"]\nwords[1]\n\n'dog'\n\n\n\ntype(words)\n\nlist\n\n\n\nif type(words) == type(numbers):\n    print(\"these variables have the same type!\")\n\nthese variables have the same type!\n\n\nIt is also possible to combine values of different type (e.g. strings and integers) in a list\n\nnewlist = [\"cat\", 1, \"horse\"]\n\nThe type of the variable newlist is list. The elements of the list have their own data type:\n\ntype(newlist[0])\n\nstr\n\n\n\ntype(newlist[1])\n\nint\n\n\nIt is possible to add numbers to an existing list using list.append()\n\nnumbers.append(4)\nprint(numbers)\n\n[1, 2, 3, 4]\n\n\nUsing the index of an item, you can replace the item in a list:\n\nnumbers[2] = 333\nprint(numbers)\n\n[1, 2, 333, 4]\n\n\nNow what do you do if you do not know the index but you know the value of an item that you want to find in a list. How to find out at which position the value is listed?\n\nindex = newlist.index(\"cat\")\nprint(\"'cat' can be found at index\", index)\nprint(newlist[index])\n\n'cat' can be found at index 0\ncat\n\n\nA tuple is similar to a list in that it’s a sequence of elements. However, tuples can not be changed once created (they are “immutable”). Tuples are created by placing comma-separated values inside parentheses () (instead of square brackets []).\n\n# Tuples use parentheses\na_tuple = (1, 2, 3)\nanother_tuple = ('blue', 'green', 'red')\n\n# Note: lists use square brackets\na_list = [1, 2, 3]\n\n\na_list[1] = 5\nprint(a_list)\n\n[1, 5, 3]\n\n\n\na_tuple[1] = 5\nprint(a_tuple)\n\nTypeError: 'tuple' object does not support item assignment\n\n\nHere we see that once the tuple is created, we cannot replace any of the values inside of the tuple.\n\ntype(a_tuple)\n\ntuple"
  },
  {
    "objectID": "Introduction_to_python_3.html#dictionaries",
    "href": "Introduction_to_python_3.html#dictionaries",
    "title": "4  Data types, if-statements and for-loops",
    "section": "4.3 Dictionaries",
    "text": "4.3 Dictionaries\nA dictionary is another way to store multiple items into one object. In dictionaries, however, this is done with keys and values. This can be useful for several reasons, one example is to store model settings, parameters or variable values for multiple scenarios.\n\nmy_dict = {'one': 'first', 'two': 'second'}\nmy_dict\n\n{'one': 'first', 'two': 'second'}\n\n\nWe can access dictionary items by their key:\n\nmy_dict['one']\n\n'first'\n\n\nAnd we can add new key-value pairs like that:\n\nmy_dict['third'] = 'three'\nmy_dict\n\n{'one': 'first', 'two': 'second', 'third': 'three'}\n\n\nDictionary items are key-value pairs. The keys are changeable and unique. The values are changable, but not necessarily unique.\n\nmy_dict['two'] = 'three'\nmy_dict\n\n{'one': 'first', 'two': 'three', 'third': 'three'}\n\n\n\nprint(\"Dictionary keys: \", my_dict.keys())\nprint(\"Dictionary values: \", my_dict.values())\nprint(\"Dictionary items (key, value): \", my_dict.items())\n\nDictionary keys:  dict_keys(['one', 'two', 'third'])\nDictionary values:  dict_values(['first', 'three', 'three'])\nDictionary items (key, value):  dict_items([('one', 'first'), ('two', 'three'), ('third', 'three')])"
  },
  {
    "objectID": "Introduction_to_python_3.html#for-loops",
    "href": "Introduction_to_python_3.html#for-loops",
    "title": "4  Data types, if-statements and for-loops",
    "section": "4.4 For loops",
    "text": "4.4 For loops\nLet’s have a look at our list again. One way to print each number is to use three print statements:\n\nnumbers = [5, 6, 7]\nprint(numbers[0])\nprint(numbers[1])\nprint(numbers[2])\n\n5\n6\n7\n\n\nA more efficient (less typing) and reliable way to print each element of a list is to loop over the list using a for loop:\n\nfor item in numbers:\n    print(item)\n\n5\n6\n7\n\n\nThe improved version uses a for loop to repeat an operation — in this case, printing — once for each item in a sequence. Note that (similar to if statements) Python needs indentation (4 whitespaces) to determine which lines of code are part of the for loop.\nIf we want to also get the index, we can use the built-in function enumerate:\n\nwords = [\"cat\", \"dog\", \"horse\"]\n\nfor index, item in enumerate(words):\n    print(index)\n    print(item)\n\n0\ncat\n1\ndog\n2\nhorse\n\n\nFor loops can also be used with dictionaries. Let’s take our dictionary from the previous section and inspect the dictionary items\n\nfor item in my_dict.items():\n    print(item, \"is of type\", type(item))\n\n('one', 'first') is of type &lt;class 'tuple'&gt;\n('two', 'three') is of type &lt;class 'tuple'&gt;\n('third', 'three') is of type &lt;class 'tuple'&gt;\n\n\nWe can extract the keys and values from the items directly in the for statement:\n\nfor key, value in my_dict.items():\n    print(key, \"-&gt;\", value)\n\none -&gt; first\ntwo -&gt; three\nthird -&gt; three"
  },
  {
    "objectID": "Introduction_to_python_3.html#exercises",
    "href": "Introduction_to_python_3.html#exercises",
    "title": "4  Data types, if-statements and for-loops",
    "section": "4.5 Exercises",
    "text": "4.5 Exercises\nNow go back to your browser to morning_exercises.ipynb and continue with exercises 4-7.\nWhen you finished the exercises, continue to chapter Write your own Python function"
  },
  {
    "objectID": "Introduction_to_python_4.html#functions",
    "href": "Introduction_to_python_4.html#functions",
    "title": "5  Write your own Python function",
    "section": "5.1 Functions",
    "text": "5.1 Functions\nWe have already seen some built-in functions: e.g. print, type, len. And we have seen special functions that belong to a variable (python object) like my_dict.items() and my_list.append(). There are more built-in functions e.g. for mathematical operations:\n\nnumbers = [5, 6, 7]\nsum(numbers)\n\n18\n\n\nPlease refer to https://docs.python.org/3/library/functions.html for more built-in functions.\n\n5.1.1 Writing own functions\nWe will now turn to writing own functions. When should you write your own function?\n1. If the functionality is not covered by an out-of-the-box function like the built-in functions or another python package\n2. When code is getting pretty long, you can split it up into logical and reusable units\n3. When code is often reused, e.g. you are reading in tens of spreadsheets and you need to clean them all in the same way. Instead of typing the line of code over and over again, it is more elegant and looks cleaner to create a function.\n4. When code may be reused outside your current project. Scripts and the functions in a script can be imported in other scripts to be able to reuse them.\nA big advantage of not having duplicate code inside your script or in multiple scripts is that when you want to make a slight modification to a function, you only have to do this modification in one place, instead of multiple lines that are doing more or less similar things.\nPython provides for this by letting us define things called ‘functions’. Let’s start by defining a function fahr_to_celsius that converts temperatures from Fahrenheit to Celsius:\n\ndef fahr_to_celsius(temp_fahrenheit):\n    temp_celsius = (temp_fahrenheit - 32) * (5/9)\n    return temp_celsius\n\nThe function definition opens with the keyword def followed by the name of the function fahr_to_celsius and a parenthesized list of variables (in this case only one temp_fahrenheit). The body of the function — the statements that are executed when it runs — is indented below the definition line. The body concludes with a return keyword followed by the return value.\nWhen we call the function, the values we pass to it as arguments are assigned to the variables in the function definition so that we can use them inside the function. Inside the function, we use a return statement to send a result back to whoever asked for it.\nLet’s try running our function.\n\nfahr_to_celsius(98)\n\n36.66666666666667\n\n\n\nprint('freezing point of water:', fahr_to_celsius(32), 'C')\nprint('boiling point of water:', fahr_to_celsius(212), 'C')\n\nfreezing point of water: 0.0 C\nboiling point of water: 100.0 C\n\n\nHere we directly passed a value to the function. We can also call the function with a variable:\n\na = 0\nprint(fahr_to_celsius(a))\n\n-17.77777777777778\n\n\nWhat happens if you pass a variable name that is not defined yet?\n\nprint(fahr_to_celsius(b))\n\nNameError: name 'b' is not defined"
  },
  {
    "objectID": "Introduction_to_python_4.html#exercises",
    "href": "Introduction_to_python_4.html#exercises",
    "title": "5  Write your own Python function",
    "section": "5.2 Exercises",
    "text": "5.2 Exercises\nNow go back to your browser to morning_exercises.ipynb and continue with exercises 8 and 9.\nWhen you finished the exercises, continue to the afternoon session"
  },
  {
    "objectID": "what-next.html",
    "href": "what-next.html",
    "title": "What Next?",
    "section": "",
    "text": "See this website as reference: https://datacarpentry.org/python-ecology-lesson/00-before-we-start/index.html\nYou can continue on your programming journey using:\n\nhelp function\ndocumentation\nStackOverflow\nChatGPT haha\nWalk-In Hours\nProgramming Cafe"
  }
]