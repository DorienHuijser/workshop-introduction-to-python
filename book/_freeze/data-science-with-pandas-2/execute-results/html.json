{
  "hash": "7908b9e0f3251d7764be10b7ff1a43a2",
  "result": {
    "markdown": "---\ntitle: \"Grouping, Indexing, Slicing, and Subsetting DataFrames\"\nformat: html\nexecute:   \n  enabled: true\n  error: true\n  freeze: auto\n---\n\n## Recap: Load the data\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nsurveys_df = pd.read_csv('../course_materials/data/surveys.csv')\nsurveys_df.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>record_id</th>\n      <th>month</th>\n      <th>day</th>\n      <th>year</th>\n      <th>plot_id</th>\n      <th>hindfoot_length</th>\n      <th>weight</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>35549.000000</td>\n      <td>35549.000000</td>\n      <td>35549.000000</td>\n      <td>35549.000000</td>\n      <td>35549.000000</td>\n      <td>31438.000000</td>\n      <td>32283.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>17775.000000</td>\n      <td>6.477847</td>\n      <td>15.991195</td>\n      <td>1990.475231</td>\n      <td>11.397001</td>\n      <td>29.287932</td>\n      <td>42.672428</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>10262.256696</td>\n      <td>3.396925</td>\n      <td>8.257366</td>\n      <td>7.493355</td>\n      <td>6.799406</td>\n      <td>9.564759</td>\n      <td>36.631259</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1977.000000</td>\n      <td>1.000000</td>\n      <td>2.000000</td>\n      <td>4.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>8888.000000</td>\n      <td>4.000000</td>\n      <td>9.000000</td>\n      <td>1984.000000</td>\n      <td>5.000000</td>\n      <td>21.000000</td>\n      <td>20.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>17775.000000</td>\n      <td>6.000000</td>\n      <td>16.000000</td>\n      <td>1990.000000</td>\n      <td>11.000000</td>\n      <td>32.000000</td>\n      <td>37.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>26662.000000</td>\n      <td>10.000000</td>\n      <td>23.000000</td>\n      <td>1997.000000</td>\n      <td>17.000000</td>\n      <td>36.000000</td>\n      <td>48.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>35549.000000</td>\n      <td>12.000000</td>\n      <td>31.000000</td>\n      <td>2002.000000</td>\n      <td>24.000000</td>\n      <td>70.000000</td>\n      <td>280.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nIn addition to learning about characteristics of our dataset as a whole, we may be interested in analyzing parts (subsets) of our data.\nFor exampe we want to know how heavy our samples are:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nsurveys_df['weight'].describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\ncount    32283.000000\nmean        42.672428\nstd         36.631259\nmin          4.000000\n25%         20.000000\n50%         37.000000\n75%         48.000000\nmax        280.000000\nName: weight, dtype: float64\n```\n:::\n:::\n\n\nWe can also extract one specific metric if we wish:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nsurveys_df['weight'].min()\nsurveys_df['weight'].max()\nsurveys_df['weight'].mean()\nsurveys_df['weight'].std()\nsurveys_df['weight'].count()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n32283\n```\n:::\n:::\n\n\n## Selecting data using column names\n\nIn the [morning session](Introduction_to_python_3.ipynb) we saw how to get specific values from dictionaries using keys. We can do the same with DataFrames, in fact we have already accessed the values in a column by the column name. In this section we will discover how to select values, slices of data and subsets of a DataFrame.\nThere are two ways of selecting columns, we have already used the first:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nsurveys_df['species_id']\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n0         NL\n1         NL\n2         DM\n3         DM\n4         DM\n        ... \n35544     AH\n35545     AH\n35546     RM\n35547     DO\n35548    NaN\nName: species_id, Length: 35549, dtype: object\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nsurveys_df.species_id\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n0         NL\n1         NL\n2         DM\n3         DM\n4         DM\n        ... \n35544     AH\n35545     AH\n35546     RM\n35547     DO\n35548    NaN\nName: species_id, Length: 35549, dtype: object\n```\n:::\n:::\n\n\nHow can we now create a DataFrame that only consists of the two columns *plot_id* and *species_id*?\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nsurveys_df[['plot_id', 'species_id']]\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>plot_id</th>\n      <th>species_id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>NL</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>NL</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>DM</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>7</td>\n      <td>DM</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>DM</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>35544</th>\n      <td>15</td>\n      <td>AH</td>\n    </tr>\n    <tr>\n      <th>35545</th>\n      <td>15</td>\n      <td>AH</td>\n    </tr>\n    <tr>\n      <th>35546</th>\n      <td>10</td>\n      <td>RM</td>\n    </tr>\n    <tr>\n      <th>35547</th>\n      <td>7</td>\n      <td>DO</td>\n    </tr>\n    <tr>\n      <th>35548</th>\n      <td>5</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>35549 rows × 2 columns</p>\n</div>\n```\n:::\n:::\n\n\nWhy the double *[[..]]*? What is the difference between `surveys_df['plot_id']` and `surveys_df[['plot_id']]`? Let us have a closer look:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nprint(type(surveys_df['plot_id']))\nprint(type(surveys_df[['plot_id']]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.series.Series'>\n<class 'pandas.core.frame.DataFrame'>\n```\n:::\n:::\n\n\nThe DataFrame is organised as a dictionary with the column names as keys and row numbers as keys for the values stored in a row. `surveys_df['plot_id']` will give us the value behind the key *plot_id*, in our case the series of numbers. When we ask for the values behind *plot_id* **and** *species_id* we need to give the DataFrame a *list* of column names like we did with `surveys_df[['plot_id', 'species_id']]`.\nWhen we pass a list of column names to a DataFrame, Pandas will execute for us the following code so that we do not have to worry about that any longer:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ncol1 = surveys_df['plot_id']\ncol2 = surveys_df['species_id']\naggregatedData = pd.DataFrame(dict(col1 = col1, col2 = col2))\naggregatedData\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>col1</th>\n      <th>col2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>NL</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>NL</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>DM</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>7</td>\n      <td>DM</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>DM</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>35544</th>\n      <td>15</td>\n      <td>AH</td>\n    </tr>\n    <tr>\n      <th>35545</th>\n      <td>15</td>\n      <td>AH</td>\n    </tr>\n    <tr>\n      <th>35546</th>\n      <td>10</td>\n      <td>RM</td>\n    </tr>\n    <tr>\n      <th>35547</th>\n      <td>7</td>\n      <td>DO</td>\n    </tr>\n    <tr>\n      <th>35548</th>\n      <td>5</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>35549 rows × 2 columns</p>\n</div>\n```\n:::\n:::\n\n\n## Slicing subsets of rows\nSlicing using the `[]` operator selects a set of rows and/or columns from a DataFrame. To slice out a set of rows, you use the following syntax: `data[start:stop]`. When slicing in pandas the start bound is included in the output. The stop bound is not included. The slicing stops _before_ the stop bound.\nSo if you want to select rows 0, 1 and 2 your code would look like this:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nsurveys_df[0:3]\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>record_id</th>\n      <th>month</th>\n      <th>day</th>\n      <th>year</th>\n      <th>plot_id</th>\n      <th>species_id</th>\n      <th>sex</th>\n      <th>hindfoot_length</th>\n      <th>weight</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>7</td>\n      <td>16</td>\n      <td>1977</td>\n      <td>2</td>\n      <td>NL</td>\n      <td>M</td>\n      <td>32.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>7</td>\n      <td>16</td>\n      <td>1977</td>\n      <td>3</td>\n      <td>NL</td>\n      <td>M</td>\n      <td>33.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>7</td>\n      <td>16</td>\n      <td>1977</td>\n      <td>2</td>\n      <td>DM</td>\n      <td>F</td>\n      <td>37.0</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe can select specific ranges of our data in both the row and column directions using either label or integer-based indexing. The respective functions for that are called `loc` (label-based indexing) and `iloc` (integer-based indexing).\n\nLet's have a look at `iloc` first. where we use the index of a row and/or column to select it. In the example below we select the first three entries and the columns month, day and year (the second, third and fourth column, remember indexing starts at 0 on Python). The first range of numbers selects the rows, the second the columns:\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# iloc[row slicing, column slicing]\nsurveys_df.iloc[0:3, 1:4]\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>month</th>\n      <th>day</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>7</td>\n      <td>16</td>\n      <td>1977</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>7</td>\n      <td>16</td>\n      <td>1977</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>7</td>\n      <td>16</td>\n      <td>1977</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe can achieve the same with the function `loc`, only instead of column indices, we use the column labels this time. So, we need to know the names of the columns:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nsurveys_df.loc[0:3, ['month', 'day', 'year']]\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>month</th>\n      <th>day</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>7</td>\n      <td>16</td>\n      <td>1977</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>7</td>\n      <td>16</td>\n      <td>1977</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>7</td>\n      <td>16</td>\n      <td>1977</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>7</td>\n      <td>16</td>\n      <td>1977</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nAnd there is a third way: In a first step we select the columns by their names `surveys_df[['month', 'day', 'year']]`. From the resulting DataFrame we then, in a second step, select the first three rows `[0:3]`. Putting the two steps together, the code looks like this:\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nsurveys_df[['month', 'day', 'year']][0:3]\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>month</th>\n      <th>day</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>7</td>\n      <td>16</td>\n      <td>1977</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>7</td>\n      <td>16</td>\n      <td>1977</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>7</td>\n      <td>16</td>\n      <td>1977</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Interactive Part\nLet us further explore the `loc` and  `iloc` functions as they are more powerful. Have a look at the examples below and predict their outcome before hitting enter.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# Select all columns for rows of index values 0 and 10\nsurveys_df.loc[[0, 10], :]\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>record_id</th>\n      <th>month</th>\n      <th>day</th>\n      <th>year</th>\n      <th>plot_id</th>\n      <th>species_id</th>\n      <th>sex</th>\n      <th>hindfoot_length</th>\n      <th>weight</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>7</td>\n      <td>16</td>\n      <td>1977</td>\n      <td>2</td>\n      <td>NL</td>\n      <td>M</td>\n      <td>32.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>11</td>\n      <td>7</td>\n      <td>16</td>\n      <td>1977</td>\n      <td>5</td>\n      <td>DS</td>\n      <td>F</td>\n      <td>53.0</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# What does this do?\nsurveys_df.loc[0, ['species_id', 'plot_id', 'weight']]\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\nspecies_id     NL\nplot_id         2\nweight        NaN\nName: 0, dtype: object\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n# What happens when you type the code below?\nsurveys_df.loc[[0, 10, 35549], :]\n```\n\n::: {.cell-output .cell-output-error}\n```\nKeyError: '[35549] not in index'\n```\n:::\n:::\n\n\nWe can also extract single values from our DataFrame:\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# data.iloc[row, column]\nsurveys_df.iloc[2, 6]\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n'F'\n```\n:::\n:::\n\n\n### Summary: Selecting slices, rows and columns\nIn the first two methods we extract the column specifying its name. The third method is essentially identical to the first one as the 6th (index 5) element of the Series ```surveys_df.columns``` is *species_id*. The fourth method uses the method ```iloc``` to select *all* the rows of the 6th column. \n\n::: {.cell tags='[]' execution_count=17}\n``` {.python .cell-code}\n# By name\n# --------------------------------------\n# Method1\nplot_id_1 = surveys_df['species_id']\n\n# Method2\nplot_id_2 = surveys_df.species_id\n# --------------------------------------\n\n# By location\n# --------------------------------------\n# Method3\nplot_id_3 = surveys_df[surveys_df.columns[5]]\n\n# Method4\nplot_id_4 = surveys_df.iloc[:,5]\n# --------------------------------------\n```\n:::\n\n\n<div class=\"alert alert-block alert-success\">\n<b>Exercise 3 to 5</b>\n    \nNow go to the Jupyter Dashboard in your internet browser and continue with the afternoon exercises 3 to 5.\n\n### Subsetting Data according to user-defined criteria\n\nWe can extract subsets of our DataFrame following the general syntax ```data_frame[<condition_on_data>]``` <condition_on_data> is a conditional statement on the DataFrame content itself. You may think at the conditional statement as a question or query you ask to your DataFrame. Here there are some examples:\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\n# What are the data collected in the year 2002?\nsurveys_df[surveys_df.year == 2002]\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>record_id</th>\n      <th>month</th>\n      <th>day</th>\n      <th>year</th>\n      <th>plot_id</th>\n      <th>species_id</th>\n      <th>sex</th>\n      <th>hindfoot_length</th>\n      <th>weight</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>33320</th>\n      <td>33321</td>\n      <td>1</td>\n      <td>12</td>\n      <td>2002</td>\n      <td>1</td>\n      <td>DM</td>\n      <td>M</td>\n      <td>38.0</td>\n      <td>44.0</td>\n    </tr>\n    <tr>\n      <th>33321</th>\n      <td>33322</td>\n      <td>1</td>\n      <td>12</td>\n      <td>2002</td>\n      <td>1</td>\n      <td>DO</td>\n      <td>M</td>\n      <td>37.0</td>\n      <td>58.0</td>\n    </tr>\n    <tr>\n      <th>33322</th>\n      <td>33323</td>\n      <td>1</td>\n      <td>12</td>\n      <td>2002</td>\n      <td>1</td>\n      <td>PB</td>\n      <td>M</td>\n      <td>28.0</td>\n      <td>45.0</td>\n    </tr>\n    <tr>\n      <th>33323</th>\n      <td>33324</td>\n      <td>1</td>\n      <td>12</td>\n      <td>2002</td>\n      <td>1</td>\n      <td>AB</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>33324</th>\n      <td>33325</td>\n      <td>1</td>\n      <td>12</td>\n      <td>2002</td>\n      <td>1</td>\n      <td>DO</td>\n      <td>M</td>\n      <td>35.0</td>\n      <td>29.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>35544</th>\n      <td>35545</td>\n      <td>12</td>\n      <td>31</td>\n      <td>2002</td>\n      <td>15</td>\n      <td>AH</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>35545</th>\n      <td>35546</td>\n      <td>12</td>\n      <td>31</td>\n      <td>2002</td>\n      <td>15</td>\n      <td>AH</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>35546</th>\n      <td>35547</td>\n      <td>12</td>\n      <td>31</td>\n      <td>2002</td>\n      <td>10</td>\n      <td>RM</td>\n      <td>F</td>\n      <td>15.0</td>\n      <td>14.0</td>\n    </tr>\n    <tr>\n      <th>35547</th>\n      <td>35548</td>\n      <td>12</td>\n      <td>31</td>\n      <td>2002</td>\n      <td>7</td>\n      <td>DO</td>\n      <td>M</td>\n      <td>36.0</td>\n      <td>51.0</td>\n    </tr>\n    <tr>\n      <th>35548</th>\n      <td>35549</td>\n      <td>12</td>\n      <td>31</td>\n      <td>2002</td>\n      <td>5</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>2229 rows × 9 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell tags='[]' execution_count=19}\n``` {.python .cell-code}\n# What are the data NOT collected in the year 2002?\nsurveys_df[surveys_df.year != 2002]\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>record_id</th>\n      <th>month</th>\n      <th>day</th>\n      <th>year</th>\n      <th>plot_id</th>\n      <th>species_id</th>\n      <th>sex</th>\n      <th>hindfoot_length</th>\n      <th>weight</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>7</td>\n      <td>16</td>\n      <td>1977</td>\n      <td>2</td>\n      <td>NL</td>\n      <td>M</td>\n      <td>32.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>7</td>\n      <td>16</td>\n      <td>1977</td>\n      <td>3</td>\n      <td>NL</td>\n      <td>M</td>\n      <td>33.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>7</td>\n      <td>16</td>\n      <td>1977</td>\n      <td>2</td>\n      <td>DM</td>\n      <td>F</td>\n      <td>37.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>7</td>\n      <td>16</td>\n      <td>1977</td>\n      <td>7</td>\n      <td>DM</td>\n      <td>M</td>\n      <td>36.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>7</td>\n      <td>16</td>\n      <td>1977</td>\n      <td>3</td>\n      <td>DM</td>\n      <td>M</td>\n      <td>35.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>33315</th>\n      <td>33316</td>\n      <td>12</td>\n      <td>16</td>\n      <td>2001</td>\n      <td>11</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>33316</th>\n      <td>33317</td>\n      <td>12</td>\n      <td>16</td>\n      <td>2001</td>\n      <td>13</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>33317</th>\n      <td>33318</td>\n      <td>12</td>\n      <td>16</td>\n      <td>2001</td>\n      <td>14</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>33318</th>\n      <td>33319</td>\n      <td>12</td>\n      <td>16</td>\n      <td>2001</td>\n      <td>15</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>33319</th>\n      <td>33320</td>\n      <td>12</td>\n      <td>16</td>\n      <td>2001</td>\n      <td>16</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>33320 rows × 9 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell tags='[]' execution_count=20}\n``` {.python .cell-code}\n# What are the data NOT collected in the year 2002? (different syntax)\nsurveys_df[~(surveys_df.year == 2002)]\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>record_id</th>\n      <th>month</th>\n      <th>day</th>\n      <th>year</th>\n      <th>plot_id</th>\n      <th>species_id</th>\n      <th>sex</th>\n      <th>hindfoot_length</th>\n      <th>weight</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>7</td>\n      <td>16</td>\n      <td>1977</td>\n      <td>2</td>\n      <td>NL</td>\n      <td>M</td>\n      <td>32.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>7</td>\n      <td>16</td>\n      <td>1977</td>\n      <td>3</td>\n      <td>NL</td>\n      <td>M</td>\n      <td>33.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>7</td>\n      <td>16</td>\n      <td>1977</td>\n      <td>2</td>\n      <td>DM</td>\n      <td>F</td>\n      <td>37.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>7</td>\n      <td>16</td>\n      <td>1977</td>\n      <td>7</td>\n      <td>DM</td>\n      <td>M</td>\n      <td>36.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>7</td>\n      <td>16</td>\n      <td>1977</td>\n      <td>3</td>\n      <td>DM</td>\n      <td>M</td>\n      <td>35.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>33315</th>\n      <td>33316</td>\n      <td>12</td>\n      <td>16</td>\n      <td>2001</td>\n      <td>11</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>33316</th>\n      <td>33317</td>\n      <td>12</td>\n      <td>16</td>\n      <td>2001</td>\n      <td>13</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>33317</th>\n      <td>33318</td>\n      <td>12</td>\n      <td>16</td>\n      <td>2001</td>\n      <td>14</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>33318</th>\n      <td>33319</td>\n      <td>12</td>\n      <td>16</td>\n      <td>2001</td>\n      <td>15</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>33319</th>\n      <td>33320</td>\n      <td>12</td>\n      <td>16</td>\n      <td>2001</td>\n      <td>16</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>33320 rows × 9 columns</p>\n</div>\n```\n:::\n:::\n\n\nOur filtering conditions may be very specific, they can target different columns in the DataFrame, and they can be combined using the logical operator \"&\" which means **and**:\n\n::: {.cell tags='[]' execution_count=21}\n``` {.python .cell-code}\n# What are the data collected between 2000 and 2002 on female species?\nsurveys_df[(surveys_df.year >= 2000) & (surveys_df.year <= 2002) & (surveys_df.sex == 'F')]\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>record_id</th>\n      <th>month</th>\n      <th>day</th>\n      <th>year</th>\n      <th>plot_id</th>\n      <th>species_id</th>\n      <th>sex</th>\n      <th>hindfoot_length</th>\n      <th>weight</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>30158</th>\n      <td>30159</td>\n      <td>1</td>\n      <td>8</td>\n      <td>2000</td>\n      <td>1</td>\n      <td>PP</td>\n      <td>F</td>\n      <td>22.0</td>\n      <td>17.0</td>\n    </tr>\n    <tr>\n      <th>30160</th>\n      <td>30161</td>\n      <td>1</td>\n      <td>8</td>\n      <td>2000</td>\n      <td>1</td>\n      <td>PP</td>\n      <td>F</td>\n      <td>21.0</td>\n      <td>17.0</td>\n    </tr>\n    <tr>\n      <th>30164</th>\n      <td>30165</td>\n      <td>1</td>\n      <td>8</td>\n      <td>2000</td>\n      <td>1</td>\n      <td>PP</td>\n      <td>F</td>\n      <td>22.0</td>\n      <td>15.0</td>\n    </tr>\n    <tr>\n      <th>30168</th>\n      <td>30169</td>\n      <td>1</td>\n      <td>8</td>\n      <td>2000</td>\n      <td>2</td>\n      <td>PB</td>\n      <td>F</td>\n      <td>25.0</td>\n      <td>24.0</td>\n    </tr>\n    <tr>\n      <th>30171</th>\n      <td>30172</td>\n      <td>1</td>\n      <td>8</td>\n      <td>2000</td>\n      <td>2</td>\n      <td>NL</td>\n      <td>F</td>\n      <td>30.0</td>\n      <td>137.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>35539</th>\n      <td>35540</td>\n      <td>12</td>\n      <td>31</td>\n      <td>2002</td>\n      <td>15</td>\n      <td>PB</td>\n      <td>F</td>\n      <td>26.0</td>\n      <td>23.0</td>\n    </tr>\n    <tr>\n      <th>35540</th>\n      <td>35541</td>\n      <td>12</td>\n      <td>31</td>\n      <td>2002</td>\n      <td>15</td>\n      <td>PB</td>\n      <td>F</td>\n      <td>24.0</td>\n      <td>31.0</td>\n    </tr>\n    <tr>\n      <th>35541</th>\n      <td>35542</td>\n      <td>12</td>\n      <td>31</td>\n      <td>2002</td>\n      <td>15</td>\n      <td>PB</td>\n      <td>F</td>\n      <td>26.0</td>\n      <td>29.0</td>\n    </tr>\n    <tr>\n      <th>35542</th>\n      <td>35543</td>\n      <td>12</td>\n      <td>31</td>\n      <td>2002</td>\n      <td>15</td>\n      <td>PB</td>\n      <td>F</td>\n      <td>27.0</td>\n      <td>34.0</td>\n    </tr>\n    <tr>\n      <th>35546</th>\n      <td>35547</td>\n      <td>12</td>\n      <td>31</td>\n      <td>2002</td>\n      <td>10</td>\n      <td>RM</td>\n      <td>F</td>\n      <td>15.0</td>\n      <td>14.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>2582 rows × 9 columns</p>\n</div>\n```\n:::\n:::\n\n\nBelow we filter for rows with collected data on female species in the year 2000 or 2002.\n\"Give me all data where sex is Female and data is collected in 2000 or 2002\".\n\nThe method ```isin()``` allows to specify a range of \"permitted\" values for a certain column. Here it follows another example:\n\n::: {.cell tags='[]' execution_count=22}\n``` {.python .cell-code}\nsurveys_df[(surveys_df.year == 2000) & (surveys_df.sex == 'F') & (surveys_df.month.isin([1,3,4]))]\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>record_id</th>\n      <th>month</th>\n      <th>day</th>\n      <th>year</th>\n      <th>plot_id</th>\n      <th>species_id</th>\n      <th>sex</th>\n      <th>hindfoot_length</th>\n      <th>weight</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>30158</th>\n      <td>30159</td>\n      <td>1</td>\n      <td>8</td>\n      <td>2000</td>\n      <td>1</td>\n      <td>PP</td>\n      <td>F</td>\n      <td>22.0</td>\n      <td>17.0</td>\n    </tr>\n    <tr>\n      <th>30160</th>\n      <td>30161</td>\n      <td>1</td>\n      <td>8</td>\n      <td>2000</td>\n      <td>1</td>\n      <td>PP</td>\n      <td>F</td>\n      <td>21.0</td>\n      <td>17.0</td>\n    </tr>\n    <tr>\n      <th>30164</th>\n      <td>30165</td>\n      <td>1</td>\n      <td>8</td>\n      <td>2000</td>\n      <td>1</td>\n      <td>PP</td>\n      <td>F</td>\n      <td>22.0</td>\n      <td>15.0</td>\n    </tr>\n    <tr>\n      <th>30168</th>\n      <td>30169</td>\n      <td>1</td>\n      <td>8</td>\n      <td>2000</td>\n      <td>2</td>\n      <td>PB</td>\n      <td>F</td>\n      <td>25.0</td>\n      <td>24.0</td>\n    </tr>\n    <tr>\n      <th>30171</th>\n      <td>30172</td>\n      <td>1</td>\n      <td>8</td>\n      <td>2000</td>\n      <td>2</td>\n      <td>NL</td>\n      <td>F</td>\n      <td>30.0</td>\n      <td>137.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>30637</th>\n      <td>30638</td>\n      <td>4</td>\n      <td>30</td>\n      <td>2000</td>\n      <td>20</td>\n      <td>PP</td>\n      <td>F</td>\n      <td>22.0</td>\n      <td>20.0</td>\n    </tr>\n    <tr>\n      <th>30640</th>\n      <td>30641</td>\n      <td>4</td>\n      <td>30</td>\n      <td>2000</td>\n      <td>20</td>\n      <td>NL</td>\n      <td>F</td>\n      <td>30.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>30645</th>\n      <td>30646</td>\n      <td>4</td>\n      <td>30</td>\n      <td>2000</td>\n      <td>24</td>\n      <td>PP</td>\n      <td>F</td>\n      <td>20.0</td>\n      <td>17.0</td>\n    </tr>\n    <tr>\n      <th>30647</th>\n      <td>30648</td>\n      <td>4</td>\n      <td>30</td>\n      <td>2000</td>\n      <td>17</td>\n      <td>DM</td>\n      <td>F</td>\n      <td>36.0</td>\n      <td>46.0</td>\n    </tr>\n    <tr>\n      <th>30648</th>\n      <td>30649</td>\n      <td>4</td>\n      <td>30</td>\n      <td>2000</td>\n      <td>17</td>\n      <td>DO</td>\n      <td>F</td>\n      <td>36.0</td>\n      <td>59.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>156 rows × 9 columns</p>\n</div>\n```\n:::\n:::\n\n\nWe have also an operator for **or**. For the sake of showing the syntax, below we fetch all entries from the year 2000 or from the gender female:\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nprint(surveys_df[(surveys_df.year == 2000) | (surveys_df.sex == 'F')])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       record_id  month  day  year  plot_id species_id sex  hindfoot_length  \\\n2              3      7   16  1977        2         DM   F             37.0   \n6              7      7   16  1977        2         PE   F              NaN   \n8              9      7   16  1977        1         DM   F             34.0   \n9             10      7   16  1977        6         PF   F             20.0   \n10            11      7   16  1977        5         DS   F             53.0   \n...          ...    ...  ...   ...      ...        ...  ..              ...   \n35539      35540     12   31  2002       15         PB   F             26.0   \n35540      35541     12   31  2002       15         PB   F             24.0   \n35541      35542     12   31  2002       15         PB   F             26.0   \n35542      35543     12   31  2002       15         PB   F             27.0   \n35546      35547     12   31  2002       10         RM   F             15.0   \n\n       weight  \n2         NaN  \n6         NaN  \n8         NaN  \n9         NaN  \n10        NaN  \n...       ...  \n35539    23.0  \n35540    31.0  \n35541    29.0  \n35542    34.0  \n35546    14.0  \n\n[16552 rows x 9 columns]\n```\n:::\n:::\n\n\n## DataFrame Cleaning\n\nA simple exploration of our DataFrame showed us that there are columns full of invalid values (NaN). One of the most important preliminary operations of data analysis is cleaning your data set, i.e. \"getting rid\" of non-numerical or non-character values. we want to make sure that our data only contains meaningful values. \n\nNow that we mastered selecting, slicing, and subsetting, we can easily clean our DataFrame with few lines of code. Let us have a look at the function *isnull*. It is a Pandas function which we imported at the beginning with `import pandas as pd`. Now we can call the functin like this:\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\npd.isnull(4)\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\nFalse\n```\n:::\n:::\n\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\npd.isnull([1, 2, 3, '', dict(), None])\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\narray([False, False, False, False, False,  True])\n```\n:::\n:::\n\n\nWe can pass single values or array-like values to the function. The function will then check for us whether each value is `NaN` (Not a Number) or `None` and return a boolean array.\nNote, that values like the empty string (a strin without any characters in it) or an empty dictionary etc will not count as `null` value, they do have a type, they only do not contain any values but they are something. \n`null` values in python are only `NaN` and `None`. When you read in tabular data into a DataFrame empty cells will be shown as `NaN`. `None` stands for the type *NoneType*, which we will not dive into further in this workshop.\n\nWith all that kowledge we can now detect `null` values in the column *weight* and do something about it. Let us have a look how many `null` values we can find:\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\npd.isnull(surveys_df.weight) # boolean array indicating where null values are found\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n0         True\n1         True\n2         True\n3         True\n4         True\n         ...  \n35544     True\n35545     True\n35546    False\n35547    False\n35548     True\nName: weight, Length: 35549, dtype: bool\n```\n:::\n:::\n\n\nWe can use the Series with the boolean values as a mask on the DataFrame. Here we only extract the rows of `surveys_df` where the weight is not defined:\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nsurveys_df[pd.isnull(surveys_df.weight)] # all lines that have a null value in the column weight\nlen(surveys_df[pd.isnull(surveys_df.weight)]) # length\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\n3266\n```\n:::\n:::\n\n\nAs you can see, in our whole dataset 3266 weight values are not usable. We need to do something with those values.\n\nAnother thing that would not make sense are negative weights. Let's check whether the remaining 32283 values in the *weight* column are positive:\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nlen(surveys_df[surveys_df.weight > 0])\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\n32283\n```\n:::\n:::\n\n\nAs we see, we have 32283 non-negative *weight* values. The remaining 3266 values in the *weight* column are not set, so they are `null`. How can we impute the values? Let us have a look at the average weight:\n\n::: {.cell tags='[]' execution_count=29}\n``` {.python .cell-code}\nsurveys_df.weight.mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\n42.672428212991356\n```\n:::\n:::\n\n\nA smooth run, without errors or warnings. As we said several times, Pandas is a library designed for data analysis and when performing data analysis it is very common to deal with not numeric values. In particular, the ```.mean()``` method has an argument called *skipna* that when set `True` (default value, so we do not need to specify it) excludes NaN values. This means that, in this case, Pandas simply ignores whatever it is not numeric and it performs computations only on numeric values.\n\nIf we are not happy with Pandas default behaviour, we can manually decide which value to assign to cells that contain `null` values. One possible choice is setting them to zero. To do that, we just need to apply the method ```.fillna(<value>)```, where `<value>` is the number we want to substitute to the `null` value with (in our case, 0).\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\ncleaned_weight1 = surveys_df.weight.fillna(0)\ncleaned_weight_ave1 = cleaned_weight1.mean()\nprint(cleaned_weight_ave1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n38.751976145601844\n```\n:::\n:::\n\n\nYou see that when filling the `null` values with 0, the average weight decreases. This is because the mean is now computed on data with many more zeros compared to the previous one.\nConscious of this problem, we may now choose a more appropriate value to \"fill\" our `null` values. How about we use the \"clean\" mean of our first computation?\n\n::: {.cell tags='[]' execution_count=31}\n``` {.python .cell-code}\ncleaned_weight2 = surveys_df.weight.fillna(surveys_df.weight.mean())\ncleaned_weight_ave2 = cleaned_weight2.mean()\nprint(cleaned_weight_ave2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n42.672428212991356\n```\n:::\n:::\n\n\nThis time we obtain exactly the same result of our first computation, this is because we substituted the `null` values with a mean computed excluding the `null` values.\n\n<div class=\"alert alert-block alert-success\">\n<b>Exercise 6 and 7</b>\n\nNow go to the Jupyter Dashboard in your internet browser and continue with the afternoon exercises 6 and 7.\n\n## Grouping\n\nWe often want to calculate summary statistics grouped by subsets or attributes within fields of our data. For example, we might want to calculate the average weight of all individuals per site.\n\nAs we have seen above we can calculate basic statistics for all records in a single column using the syntax below:\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nsurveys_df['weight'].describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\ncount    32283.000000\nmean        42.672428\nstd         36.631259\nmin          4.000000\n25%         20.000000\n50%         37.000000\n75%         48.000000\nmax        280.000000\nName: weight, dtype: float64\n```\n:::\n:::\n\n\nIf we want to summarize by one or more variables, for example sex, we can use Pandas’ `.groupby()` method. Once we’ve created a groupby DataFrame, we can quickly calculate summary statistics by a group of our choice.\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\ngrouped_data = surveys_df.groupby('sex')\ngrouped_data.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"8\" halign=\"left\">record_id</th>\n      <th colspan=\"2\" halign=\"left\">month</th>\n      <th>...</th>\n      <th colspan=\"2\" halign=\"left\">hindfoot_length</th>\n      <th colspan=\"8\" halign=\"left\">weight</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n      <th>count</th>\n      <th>mean</th>\n      <th>...</th>\n      <th>75%</th>\n      <th>max</th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n    <tr>\n      <th>sex</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>F</th>\n      <td>15690.0</td>\n      <td>18036.412046</td>\n      <td>10423.089000</td>\n      <td>3.0</td>\n      <td>8917.50</td>\n      <td>18075.5</td>\n      <td>27250.00</td>\n      <td>35547.0</td>\n      <td>15690.0</td>\n      <td>6.587253</td>\n      <td>...</td>\n      <td>36.0</td>\n      <td>64.0</td>\n      <td>15303.0</td>\n      <td>42.170555</td>\n      <td>36.847958</td>\n      <td>4.0</td>\n      <td>20.0</td>\n      <td>34.0</td>\n      <td>46.0</td>\n      <td>274.0</td>\n    </tr>\n    <tr>\n      <th>M</th>\n      <td>17348.0</td>\n      <td>17754.835601</td>\n      <td>10132.203323</td>\n      <td>1.0</td>\n      <td>8969.75</td>\n      <td>17727.5</td>\n      <td>26454.25</td>\n      <td>35548.0</td>\n      <td>17348.0</td>\n      <td>6.396184</td>\n      <td>...</td>\n      <td>36.0</td>\n      <td>58.0</td>\n      <td>16879.0</td>\n      <td>42.995379</td>\n      <td>36.184981</td>\n      <td>4.0</td>\n      <td>20.0</td>\n      <td>39.0</td>\n      <td>49.0</td>\n      <td>280.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>2 rows × 56 columns</p>\n</div>\n```\n:::\n:::\n\n\nThe output is a bit overwhelming. Let's just have a look at one statistical value, the mean, to understand what is happening here:\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\ngrouped_data.mean()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\Moope001\\AppData\\Local\\Temp\\ipykernel_25336\\1133710423.py:1: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n  grouped_data.mean()\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=34}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>record_id</th>\n      <th>month</th>\n      <th>day</th>\n      <th>year</th>\n      <th>plot_id</th>\n      <th>hindfoot_length</th>\n      <th>weight</th>\n    </tr>\n    <tr>\n      <th>sex</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>F</th>\n      <td>18036.412046</td>\n      <td>6.587253</td>\n      <td>15.880943</td>\n      <td>1990.644997</td>\n      <td>11.440854</td>\n      <td>28.836780</td>\n      <td>42.170555</td>\n    </tr>\n    <tr>\n      <th>M</th>\n      <td>17754.835601</td>\n      <td>6.396184</td>\n      <td>16.078799</td>\n      <td>1990.480401</td>\n      <td>11.098282</td>\n      <td>29.709578</td>\n      <td>42.995379</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe see that the data is divided into two groups, one group where the value in the column *sex* equals \"F\" and another group where the value in the column *sex* equals \"M\". The statistics is then calculated for all samples in that specific group for each of the columns in the dataframe. Note that samples annotated with sex equals NaN and column values with NaN are left out.\n\n## Structure of a groupby object\nWe can investigate which rows are assigned to which group as follows:\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\nprint(type(grouped_data.groups)) # dictionary\nprint(\"Plot ids: \", grouped_data.groups.keys()) # keys are the unique values of the column we grouped by\nprint(\"Rows belonging to sex 'F': \", grouped_data.groups['F']) # values are row indexes \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.io.formats.printing.PrettyDict'>\nPlot ids:  dict_keys(['F', 'M'])\nRows belonging to sex 'F':  Int64Index([    2,     6,     8,     9,    10,    14,    15,    16,    19,\n               20,\n            ...\n            35531, 35532, 35535, 35536, 35537, 35539, 35540, 35541, 35542,\n            35546],\n           dtype='int64', length=15690)\n```\n:::\n:::\n\n\n## Grouping by multiple columns\nNow let's have a look at a more complex grouping example. We want an overview statistics of the weight of all females and males by plot id. So in fact we want to group by *sex* and by *plot_id* at the same time.\n\nThis will give us exactly 48 groups for our survey data:\n\n* female, plot id = 1\n* female, plot id = 2\n* ...\n* female, plot id = 24\n* male, plot id = 1\n* ...\n* male, plot id = 24\n\nWhy 48 groups? We have 24 unique values for *plot_id*. Per plot we have two groups of samples, female and male. Hence, the grouping returns 48 groups.\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\ngrouped_data = surveys_df.groupby(['sex', 'plot_id'])\ngrouped_data[\"weight\"].describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n    <tr>\n      <th>sex</th>\n      <th>plot_id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"24\" valign=\"top\">F</th>\n      <th>1</th>\n      <td>826.0</td>\n      <td>46.311138</td>\n      <td>33.240958</td>\n      <td>5.0</td>\n      <td>26.00</td>\n      <td>40.0</td>\n      <td>50.00</td>\n      <td>196.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>954.0</td>\n      <td>52.561845</td>\n      <td>45.547697</td>\n      <td>5.0</td>\n      <td>25.00</td>\n      <td>40.0</td>\n      <td>51.00</td>\n      <td>274.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>873.0</td>\n      <td>31.215349</td>\n      <td>30.687451</td>\n      <td>4.0</td>\n      <td>15.00</td>\n      <td>23.0</td>\n      <td>34.00</td>\n      <td>199.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>850.0</td>\n      <td>46.818824</td>\n      <td>33.560664</td>\n      <td>5.0</td>\n      <td>28.00</td>\n      <td>40.0</td>\n      <td>47.00</td>\n      <td>200.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>516.0</td>\n      <td>40.974806</td>\n      <td>36.396966</td>\n      <td>5.0</td>\n      <td>21.00</td>\n      <td>35.0</td>\n      <td>45.00</td>\n      <td>248.0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>721.0</td>\n      <td>36.352288</td>\n      <td>29.513333</td>\n      <td>5.0</td>\n      <td>19.00</td>\n      <td>29.0</td>\n      <td>41.00</td>\n      <td>188.0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>326.0</td>\n      <td>20.006135</td>\n      <td>17.895937</td>\n      <td>6.0</td>\n      <td>12.00</td>\n      <td>17.0</td>\n      <td>23.00</td>\n      <td>170.0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>817.0</td>\n      <td>45.623011</td>\n      <td>31.045426</td>\n      <td>5.0</td>\n      <td>25.00</td>\n      <td>42.0</td>\n      <td>50.00</td>\n      <td>178.0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>823.0</td>\n      <td>53.618469</td>\n      <td>35.572793</td>\n      <td>6.0</td>\n      <td>35.00</td>\n      <td>43.0</td>\n      <td>54.00</td>\n      <td>177.0</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>138.0</td>\n      <td>17.094203</td>\n      <td>14.074820</td>\n      <td>7.0</td>\n      <td>10.00</td>\n      <td>13.0</td>\n      <td>20.00</td>\n      <td>130.0</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>796.0</td>\n      <td>43.515075</td>\n      <td>29.627049</td>\n      <td>5.0</td>\n      <td>27.00</td>\n      <td>40.0</td>\n      <td>46.00</td>\n      <td>208.0</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>1040.0</td>\n      <td>49.831731</td>\n      <td>43.790247</td>\n      <td>6.0</td>\n      <td>26.00</td>\n      <td>41.0</td>\n      <td>48.25</td>\n      <td>264.0</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>610.0</td>\n      <td>40.524590</td>\n      <td>36.109806</td>\n      <td>5.0</td>\n      <td>21.00</td>\n      <td>31.0</td>\n      <td>42.00</td>\n      <td>192.0</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>692.0</td>\n      <td>47.355491</td>\n      <td>29.563455</td>\n      <td>5.0</td>\n      <td>37.00</td>\n      <td>43.0</td>\n      <td>48.00</td>\n      <td>211.0</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>467.0</td>\n      <td>26.670236</td>\n      <td>31.983137</td>\n      <td>4.0</td>\n      <td>12.50</td>\n      <td>18.0</td>\n      <td>26.00</td>\n      <td>198.0</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>211.0</td>\n      <td>25.810427</td>\n      <td>20.902314</td>\n      <td>4.0</td>\n      <td>13.00</td>\n      <td>21.0</td>\n      <td>31.00</td>\n      <td>158.0</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>874.0</td>\n      <td>48.176201</td>\n      <td>37.485528</td>\n      <td>6.0</td>\n      <td>27.00</td>\n      <td>41.0</td>\n      <td>49.00</td>\n      <td>192.0</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>740.0</td>\n      <td>36.963514</td>\n      <td>35.184417</td>\n      <td>5.0</td>\n      <td>17.00</td>\n      <td>28.5</td>\n      <td>40.00</td>\n      <td>212.0</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>514.0</td>\n      <td>21.978599</td>\n      <td>14.008822</td>\n      <td>6.0</td>\n      <td>12.00</td>\n      <td>20.0</td>\n      <td>29.00</td>\n      <td>139.0</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>631.0</td>\n      <td>52.624406</td>\n      <td>55.257665</td>\n      <td>5.0</td>\n      <td>17.00</td>\n      <td>30.0</td>\n      <td>48.00</td>\n      <td>220.0</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>596.0</td>\n      <td>25.974832</td>\n      <td>22.619863</td>\n      <td>4.0</td>\n      <td>11.00</td>\n      <td>24.0</td>\n      <td>31.00</td>\n      <td>188.0</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>646.0</td>\n      <td>53.647059</td>\n      <td>38.588538</td>\n      <td>5.0</td>\n      <td>29.00</td>\n      <td>39.0</td>\n      <td>54.00</td>\n      <td>161.0</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>163.0</td>\n      <td>20.564417</td>\n      <td>18.933945</td>\n      <td>8.0</td>\n      <td>12.00</td>\n      <td>16.0</td>\n      <td>23.00</td>\n      <td>199.0</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>479.0</td>\n      <td>47.914405</td>\n      <td>49.112574</td>\n      <td>6.0</td>\n      <td>21.00</td>\n      <td>33.0</td>\n      <td>44.00</td>\n      <td>251.0</td>\n    </tr>\n    <tr>\n      <th rowspan=\"24\" valign=\"top\">M</th>\n      <th>1</th>\n      <td>1072.0</td>\n      <td>55.950560</td>\n      <td>41.035686</td>\n      <td>4.0</td>\n      <td>37.00</td>\n      <td>46.0</td>\n      <td>54.00</td>\n      <td>231.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1114.0</td>\n      <td>51.391382</td>\n      <td>46.690887</td>\n      <td>5.0</td>\n      <td>24.00</td>\n      <td>42.0</td>\n      <td>50.00</td>\n      <td>278.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>827.0</td>\n      <td>34.163241</td>\n      <td>40.260426</td>\n      <td>5.0</td>\n      <td>13.00</td>\n      <td>23.0</td>\n      <td>39.00</td>\n      <td>250.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1010.0</td>\n      <td>48.888119</td>\n      <td>32.254168</td>\n      <td>4.0</td>\n      <td>32.00</td>\n      <td>44.5</td>\n      <td>50.00</td>\n      <td>187.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>573.0</td>\n      <td>40.708551</td>\n      <td>31.250967</td>\n      <td>6.0</td>\n      <td>21.00</td>\n      <td>40.0</td>\n      <td>49.00</td>\n      <td>240.0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>739.0</td>\n      <td>36.867388</td>\n      <td>30.867779</td>\n      <td>6.0</td>\n      <td>18.00</td>\n      <td>31.0</td>\n      <td>46.00</td>\n      <td>241.0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>303.0</td>\n      <td>21.194719</td>\n      <td>23.971252</td>\n      <td>4.0</td>\n      <td>11.00</td>\n      <td>17.0</td>\n      <td>23.00</td>\n      <td>235.0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>962.0</td>\n      <td>49.641372</td>\n      <td>34.820355</td>\n      <td>5.0</td>\n      <td>29.00</td>\n      <td>45.0</td>\n      <td>52.00</td>\n      <td>173.0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>984.0</td>\n      <td>49.519309</td>\n      <td>31.888023</td>\n      <td>6.0</td>\n      <td>37.00</td>\n      <td>46.0</td>\n      <td>50.00</td>\n      <td>275.0</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>139.0</td>\n      <td>19.971223</td>\n      <td>25.061068</td>\n      <td>4.0</td>\n      <td>10.00</td>\n      <td>12.0</td>\n      <td>22.00</td>\n      <td>237.0</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>994.0</td>\n      <td>43.366197</td>\n      <td>28.425105</td>\n      <td>6.0</td>\n      <td>25.00</td>\n      <td>43.0</td>\n      <td>49.00</td>\n      <td>212.0</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>1174.0</td>\n      <td>48.909710</td>\n      <td>39.301038</td>\n      <td>7.0</td>\n      <td>25.25</td>\n      <td>43.0</td>\n      <td>50.00</td>\n      <td>280.0</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>757.0</td>\n      <td>40.097754</td>\n      <td>31.753448</td>\n      <td>6.0</td>\n      <td>20.00</td>\n      <td>34.0</td>\n      <td>47.00</td>\n      <td>241.0</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>1029.0</td>\n      <td>45.159378</td>\n      <td>25.272173</td>\n      <td>5.0</td>\n      <td>35.00</td>\n      <td>44.0</td>\n      <td>50.00</td>\n      <td>222.0</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>401.0</td>\n      <td>27.523691</td>\n      <td>38.631271</td>\n      <td>4.0</td>\n      <td>10.00</td>\n      <td>18.0</td>\n      <td>25.00</td>\n      <td>259.0</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>265.0</td>\n      <td>23.811321</td>\n      <td>14.663726</td>\n      <td>5.0</td>\n      <td>11.00</td>\n      <td>20.0</td>\n      <td>35.00</td>\n      <td>61.0</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>1011.0</td>\n      <td>47.558853</td>\n      <td>34.082010</td>\n      <td>4.0</td>\n      <td>27.00</td>\n      <td>45.0</td>\n      <td>51.00</td>\n      <td>216.0</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>607.0</td>\n      <td>43.546952</td>\n      <td>41.864279</td>\n      <td>7.0</td>\n      <td>18.00</td>\n      <td>33.0</td>\n      <td>48.00</td>\n      <td>256.0</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>567.0</td>\n      <td>20.306878</td>\n      <td>12.553954</td>\n      <td>4.0</td>\n      <td>10.00</td>\n      <td>19.0</td>\n      <td>25.00</td>\n      <td>100.0</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>588.0</td>\n      <td>44.197279</td>\n      <td>43.361503</td>\n      <td>5.0</td>\n      <td>17.00</td>\n      <td>34.0</td>\n      <td>47.00</td>\n      <td>223.0</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>431.0</td>\n      <td>22.772622</td>\n      <td>18.984554</td>\n      <td>4.0</td>\n      <td>9.00</td>\n      <td>19.0</td>\n      <td>32.00</td>\n      <td>190.0</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>648.0</td>\n      <td>54.572531</td>\n      <td>38.841066</td>\n      <td>6.0</td>\n      <td>31.00</td>\n      <td>44.0</td>\n      <td>53.00</td>\n      <td>212.0</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>205.0</td>\n      <td>18.941463</td>\n      <td>17.979740</td>\n      <td>4.0</td>\n      <td>10.00</td>\n      <td>12.0</td>\n      <td>22.00</td>\n      <td>131.0</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>479.0</td>\n      <td>39.321503</td>\n      <td>42.003947</td>\n      <td>4.0</td>\n      <td>17.00</td>\n      <td>24.0</td>\n      <td>45.00</td>\n      <td>230.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Counting and plotting\nAnother very useful outcome of grouping is the possibility of performing selective counting. For example, let's see how to count the number of records per species. We just need to remember that each species has a unique ID and that records are identified by another ID stored in the column record ID. We will first group our data according to the species ID and then, for each group, we will count the number of records. Several consecutive operations that, once again, Pandas allows us to execute in a single line.\n\n::: {.cell tags='[]' execution_count=37}\n``` {.python .cell-code}\nspecies_counts = surveys_df.groupby('species_id')['record_id'].count()\nspecies_counts\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\nspecies_id\nAB      303\nAH      437\nAS        2\nBA       46\nCB       50\nCM       13\nCQ       16\nCS        1\nCT        1\nCU        1\nCV        1\nDM    10596\nDO     3027\nDS     2504\nDX       40\nNL     1252\nOL     1006\nOT     2249\nOX       12\nPB     2891\nPC       39\nPE     1299\nPF     1597\nPG        8\nPH       32\nPI        9\nPL       36\nPM      899\nPP     3123\nPU        5\nPX        6\nRF       75\nRM     2609\nRO        8\nRX        2\nSA       75\nSC        1\nSF       43\nSH      147\nSO       43\nSS      248\nST        1\nSU        5\nUL        4\nUP        8\nUR       10\nUS        4\nZL        2\nName: record_id, dtype: int64\n```\n:::\n:::\n\n\nWe can also plot the information for better overview. We will learn more about plotting after the next chapter.\n\n::: {.cell tags='[]' execution_count=38}\n``` {.python .cell-code}\nspecies_counts.plot(kind='bar')\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\n<Axes: xlabel='species_id'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](data-science-with-pandas-2_files/figure-html/cell-39-output-2.png){width=593 height=438}\n:::\n:::\n\n\n## Summary grouping\nGrouping is one of the most common operation in data analysis. Data often consists of different measurements on the same samples. In many cases we are not only interested in one particular measurement but in the cross product of measurements. In the picture below we labeled samples with green lines, blue dots and red lines. We are now interested how these three different groups relate to each other given the all other measurements in the dataframe. Pandas' groupby function gives us the means to compare these three groups with several built-in statistical methods.\n\n![Grouping sketch](images/grouping.jpeg)\n\n<div class=\"alert alert-block alert-success\">\n<b>Exercise 8 to 10</b>\n    \nNow go to the Jupyter Dashboard in your internet browser and continue with the afternoon exercises 8 to 10.\n\nAfter you finished the exercises please come back to this document and continue with the [following chapter](data-science-with-pandas-3.ipynb).\n\n",
    "supporting": [
      "data-science-with-pandas-2_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}